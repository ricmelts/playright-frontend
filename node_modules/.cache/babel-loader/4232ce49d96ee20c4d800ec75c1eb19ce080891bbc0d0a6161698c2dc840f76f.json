{"ast":null,"code":"\"use client\";\n\n// src/menu.tsx\nimport _objectWithoutProperties from \"/Users/ericmeltser/Downloads/playright_frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/ericmeltser/Downloads/playright_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nconst _excluded = [\"__scopeMenu\"],\n  _excluded2 = [\"forceMount\"],\n  _excluded3 = [\"__scopeMenu\", \"loop\", \"trapFocus\", \"onOpenAutoFocus\", \"onCloseAutoFocus\", \"disableOutsidePointerEvents\", \"onEntryFocus\", \"onEscapeKeyDown\", \"onPointerDownOutside\", \"onFocusOutside\", \"onInteractOutside\", \"onDismiss\", \"disableOutsideScroll\"],\n  _excluded4 = [\"__scopeMenu\"],\n  _excluded5 = [\"__scopeMenu\"],\n  _excluded6 = [\"disabled\", \"onSelect\"],\n  _excluded7 = [\"__scopeMenu\", \"disabled\", \"textValue\"],\n  _excluded8 = [\"checked\", \"onCheckedChange\"],\n  _excluded9 = [\"value\", \"onValueChange\"],\n  _excluded0 = [\"value\"],\n  _excluded1 = [\"__scopeMenu\", \"forceMount\"],\n  _excluded10 = [\"__scopeMenu\"],\n  _excluded11 = [\"__scopeMenu\"],\n  _excluded12 = [\"forceMount\"];\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { createCollection } from \"@radix-ui/react-collection\";\nimport { useComposedRefs, composeRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useDirection } from \"@radix-ui/react-direction\";\nimport { DismissableLayer } from \"@radix-ui/react-dismissable-layer\";\nimport { useFocusGuards } from \"@radix-ui/react-focus-guards\";\nimport { FocusScope } from \"@radix-ui/react-focus-scope\";\nimport { useId } from \"@radix-ui/react-id\";\nimport * as PopperPrimitive from \"@radix-ui/react-popper\";\nimport { createPopperScope } from \"@radix-ui/react-popper\";\nimport { Portal as PortalPrimitive } from \"@radix-ui/react-portal\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { Primitive, dispatchDiscreteCustomEvent } from \"@radix-ui/react-primitive\";\nimport * as RovingFocusGroup from \"@radix-ui/react-roving-focus\";\nimport { createRovingFocusGroupScope } from \"@radix-ui/react-roving-focus\";\nimport { createSlot } from \"@radix-ui/react-slot\";\nimport { useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\nimport { hideOthers } from \"aria-hidden\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { jsx } from \"react/jsx-runtime\";\nvar SELECTION_KEYS = [\"Enter\", \" \"];\nvar FIRST_KEYS = [\"ArrowDown\", \"PageUp\", \"Home\"];\nvar LAST_KEYS = [\"ArrowUp\", \"PageDown\", \"End\"];\nvar FIRST_LAST_KEYS = [...FIRST_KEYS, ...LAST_KEYS];\nvar SUB_OPEN_KEYS = {\n  ltr: [...SELECTION_KEYS, \"ArrowRight\"],\n  rtl: [...SELECTION_KEYS, \"ArrowLeft\"]\n};\nvar SUB_CLOSE_KEYS = {\n  ltr: [\"ArrowLeft\"],\n  rtl: [\"ArrowRight\"]\n};\nvar MENU_NAME = \"Menu\";\nvar [Collection, useCollection, createCollectionScope] = createCollection(MENU_NAME);\nvar [createMenuContext, createMenuScope] = createContextScope(MENU_NAME, [createCollectionScope, createPopperScope, createRovingFocusGroupScope]);\nvar usePopperScope = createPopperScope();\nvar useRovingFocusGroupScope = createRovingFocusGroupScope();\nvar [MenuProvider, useMenuContext] = createMenuContext(MENU_NAME);\nvar [MenuRootProvider, useMenuRootContext] = createMenuContext(MENU_NAME);\nvar Menu = props => {\n  const {\n    __scopeMenu,\n    open = false,\n    children,\n    dir,\n    onOpenChange,\n    modal = true\n  } = props;\n  const popperScope = usePopperScope(__scopeMenu);\n  const [content, setContent] = React.useState(null);\n  const isUsingKeyboardRef = React.useRef(false);\n  const handleOpenChange = useCallbackRef(onOpenChange);\n  const direction = useDirection(dir);\n  React.useEffect(() => {\n    const handleKeyDown = () => {\n      isUsingKeyboardRef.current = true;\n      document.addEventListener(\"pointerdown\", handlePointer, {\n        capture: true,\n        once: true\n      });\n      document.addEventListener(\"pointermove\", handlePointer, {\n        capture: true,\n        once: true\n      });\n    };\n    const handlePointer = () => isUsingKeyboardRef.current = false;\n    document.addEventListener(\"keydown\", handleKeyDown, {\n      capture: true\n    });\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown, {\n        capture: true\n      });\n      document.removeEventListener(\"pointerdown\", handlePointer, {\n        capture: true\n      });\n      document.removeEventListener(\"pointermove\", handlePointer, {\n        capture: true\n      });\n    };\n  }, []);\n  return /* @__PURE__ */jsx(PopperPrimitive.Root, _objectSpread(_objectSpread({}, popperScope), {}, {\n    children: /* @__PURE__ */jsx(MenuProvider, {\n      scope: __scopeMenu,\n      open,\n      onOpenChange: handleOpenChange,\n      content,\n      onContentChange: setContent,\n      children: /* @__PURE__ */jsx(MenuRootProvider, {\n        scope: __scopeMenu,\n        onClose: React.useCallback(() => handleOpenChange(false), [handleOpenChange]),\n        isUsingKeyboardRef,\n        dir: direction,\n        modal,\n        children\n      })\n    })\n  }));\n};\nMenu.displayName = MENU_NAME;\nvar ANCHOR_NAME = \"MenuAnchor\";\nvar MenuAnchor = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeMenu\n    } = props,\n    anchorProps = _objectWithoutProperties(props, _excluded);\n  const popperScope = usePopperScope(__scopeMenu);\n  return /* @__PURE__ */jsx(PopperPrimitive.Anchor, _objectSpread(_objectSpread(_objectSpread({}, popperScope), anchorProps), {}, {\n    ref: forwardedRef\n  }));\n});\nMenuAnchor.displayName = ANCHOR_NAME;\nvar PORTAL_NAME = \"MenuPortal\";\nvar [PortalProvider, usePortalContext] = createMenuContext(PORTAL_NAME, {\n  forceMount: void 0\n});\nvar MenuPortal = props => {\n  const {\n    __scopeMenu,\n    forceMount,\n    children,\n    container\n  } = props;\n  const context = useMenuContext(PORTAL_NAME, __scopeMenu);\n  return /* @__PURE__ */jsx(PortalProvider, {\n    scope: __scopeMenu,\n    forceMount,\n    children: /* @__PURE__ */jsx(Presence, {\n      present: forceMount || context.open,\n      children: /* @__PURE__ */jsx(PortalPrimitive, {\n        asChild: true,\n        container,\n        children\n      })\n    })\n  });\n};\nMenuPortal.displayName = PORTAL_NAME;\nvar CONTENT_NAME = \"MenuContent\";\nvar [MenuContentProvider, useMenuContentContext] = createMenuContext(CONTENT_NAME);\nvar MenuContent = React.forwardRef((props, forwardedRef) => {\n  const portalContext = usePortalContext(CONTENT_NAME, props.__scopeMenu);\n  const {\n      forceMount = portalContext.forceMount\n    } = props,\n    contentProps = _objectWithoutProperties(props, _excluded2);\n  const context = useMenuContext(CONTENT_NAME, props.__scopeMenu);\n  const rootContext = useMenuRootContext(CONTENT_NAME, props.__scopeMenu);\n  return /* @__PURE__ */jsx(Collection.Provider, {\n    scope: props.__scopeMenu,\n    children: /* @__PURE__ */jsx(Presence, {\n      present: forceMount || context.open,\n      children: /* @__PURE__ */jsx(Collection.Slot, {\n        scope: props.__scopeMenu,\n        children: rootContext.modal ? /* @__PURE__ */jsx(MenuRootContentModal, _objectSpread(_objectSpread({}, contentProps), {}, {\n          ref: forwardedRef\n        })) : /* @__PURE__ */jsx(MenuRootContentNonModal, _objectSpread(_objectSpread({}, contentProps), {}, {\n          ref: forwardedRef\n        }))\n      })\n    })\n  });\n});\nvar MenuRootContentModal = React.forwardRef((props, forwardedRef) => {\n  const context = useMenuContext(CONTENT_NAME, props.__scopeMenu);\n  const ref = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  React.useEffect(() => {\n    const content = ref.current;\n    if (content) return hideOthers(content);\n  }, []);\n  return /* @__PURE__ */jsx(MenuContentImpl, _objectSpread(_objectSpread({}, props), {}, {\n    ref: composedRefs,\n    trapFocus: context.open,\n    disableOutsidePointerEvents: context.open,\n    disableOutsideScroll: true,\n    onFocusOutside: composeEventHandlers(props.onFocusOutside, event => event.preventDefault(), {\n      checkForDefaultPrevented: false\n    }),\n    onDismiss: () => context.onOpenChange(false)\n  }));\n});\nvar MenuRootContentNonModal = React.forwardRef((props, forwardedRef) => {\n  const context = useMenuContext(CONTENT_NAME, props.__scopeMenu);\n  return /* @__PURE__ */jsx(MenuContentImpl, _objectSpread(_objectSpread({}, props), {}, {\n    ref: forwardedRef,\n    trapFocus: false,\n    disableOutsidePointerEvents: false,\n    disableOutsideScroll: false,\n    onDismiss: () => context.onOpenChange(false)\n  }));\n});\nvar Slot = createSlot(\"MenuContent.ScrollLock\");\nvar MenuContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeMenu,\n      loop = false,\n      trapFocus,\n      onOpenAutoFocus,\n      onCloseAutoFocus,\n      disableOutsidePointerEvents,\n      onEntryFocus,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      onFocusOutside,\n      onInteractOutside,\n      onDismiss,\n      disableOutsideScroll\n    } = props,\n    contentProps = _objectWithoutProperties(props, _excluded3);\n  const context = useMenuContext(CONTENT_NAME, __scopeMenu);\n  const rootContext = useMenuRootContext(CONTENT_NAME, __scopeMenu);\n  const popperScope = usePopperScope(__scopeMenu);\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenu);\n  const getItems = useCollection(__scopeMenu);\n  const [currentItemId, setCurrentItemId] = React.useState(null);\n  const contentRef = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, contentRef, context.onContentChange);\n  const timerRef = React.useRef(0);\n  const searchRef = React.useRef(\"\");\n  const pointerGraceTimerRef = React.useRef(0);\n  const pointerGraceIntentRef = React.useRef(null);\n  const pointerDirRef = React.useRef(\"right\");\n  const lastPointerXRef = React.useRef(0);\n  const ScrollLockWrapper = disableOutsideScroll ? RemoveScroll : React.Fragment;\n  const scrollLockWrapperProps = disableOutsideScroll ? {\n    as: Slot,\n    allowPinchZoom: true\n  } : void 0;\n  const handleTypeaheadSearch = key => {\n    var _items$find, _items$find2;\n    const search = searchRef.current + key;\n    const items = getItems().filter(item => !item.disabled);\n    const currentItem = document.activeElement;\n    const currentMatch = (_items$find = items.find(item => item.ref.current === currentItem)) === null || _items$find === void 0 ? void 0 : _items$find.textValue;\n    const values = items.map(item => item.textValue);\n    const nextMatch = getNextMatch(values, search, currentMatch);\n    const newItem = (_items$find2 = items.find(item => item.textValue === nextMatch)) === null || _items$find2 === void 0 ? void 0 : _items$find2.ref.current;\n    (function updateSearch(value) {\n      searchRef.current = value;\n      window.clearTimeout(timerRef.current);\n      if (value !== \"\") timerRef.current = window.setTimeout(() => updateSearch(\"\"), 1e3);\n    })(search);\n    if (newItem) {\n      setTimeout(() => newItem.focus());\n    }\n  };\n  React.useEffect(() => {\n    return () => window.clearTimeout(timerRef.current);\n  }, []);\n  useFocusGuards();\n  const isPointerMovingToSubmenu = React.useCallback(event => {\n    var _pointerGraceIntentRe, _pointerGraceIntentRe2;\n    const isMovingTowards = pointerDirRef.current === ((_pointerGraceIntentRe = pointerGraceIntentRef.current) === null || _pointerGraceIntentRe === void 0 ? void 0 : _pointerGraceIntentRe.side);\n    return isMovingTowards && isPointerInGraceArea(event, (_pointerGraceIntentRe2 = pointerGraceIntentRef.current) === null || _pointerGraceIntentRe2 === void 0 ? void 0 : _pointerGraceIntentRe2.area);\n  }, []);\n  return /* @__PURE__ */jsx(MenuContentProvider, {\n    scope: __scopeMenu,\n    searchRef,\n    onItemEnter: React.useCallback(event => {\n      if (isPointerMovingToSubmenu(event)) event.preventDefault();\n    }, [isPointerMovingToSubmenu]),\n    onItemLeave: React.useCallback(event => {\n      var _contentRef$current;\n      if (isPointerMovingToSubmenu(event)) return;\n      (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 || _contentRef$current.focus();\n      setCurrentItemId(null);\n    }, [isPointerMovingToSubmenu]),\n    onTriggerLeave: React.useCallback(event => {\n      if (isPointerMovingToSubmenu(event)) event.preventDefault();\n    }, [isPointerMovingToSubmenu]),\n    pointerGraceTimerRef,\n    onPointerGraceIntentChange: React.useCallback(intent => {\n      pointerGraceIntentRef.current = intent;\n    }, []),\n    children: /* @__PURE__ */jsx(ScrollLockWrapper, _objectSpread(_objectSpread({}, scrollLockWrapperProps), {}, {\n      children: /* @__PURE__ */jsx(FocusScope, {\n        asChild: true,\n        trapped: trapFocus,\n        onMountAutoFocus: composeEventHandlers(onOpenAutoFocus, event => {\n          var _contentRef$current2;\n          event.preventDefault();\n          (_contentRef$current2 = contentRef.current) === null || _contentRef$current2 === void 0 || _contentRef$current2.focus({\n            preventScroll: true\n          });\n        }),\n        onUnmountAutoFocus: onCloseAutoFocus,\n        children: /* @__PURE__ */jsx(DismissableLayer, {\n          asChild: true,\n          disableOutsidePointerEvents,\n          onEscapeKeyDown,\n          onPointerDownOutside,\n          onFocusOutside,\n          onInteractOutside,\n          onDismiss,\n          children: /* @__PURE__ */jsx(RovingFocusGroup.Root, _objectSpread(_objectSpread({\n            asChild: true\n          }, rovingFocusGroupScope), {}, {\n            dir: rootContext.dir,\n            orientation: \"vertical\",\n            loop,\n            currentTabStopId: currentItemId,\n            onCurrentTabStopIdChange: setCurrentItemId,\n            onEntryFocus: composeEventHandlers(onEntryFocus, event => {\n              if (!rootContext.isUsingKeyboardRef.current) event.preventDefault();\n            }),\n            preventScrollOnEntryFocus: true,\n            children: /* @__PURE__ */jsx(PopperPrimitive.Content, _objectSpread(_objectSpread(_objectSpread({\n              role: \"menu\",\n              \"aria-orientation\": \"vertical\",\n              \"data-state\": getOpenState(context.open),\n              \"data-radix-menu-content\": \"\",\n              dir: rootContext.dir\n            }, popperScope), contentProps), {}, {\n              ref: composedRefs,\n              style: _objectSpread({\n                outline: \"none\"\n              }, contentProps.style),\n              onKeyDown: composeEventHandlers(contentProps.onKeyDown, event => {\n                const target = event.target;\n                const isKeyDownInside = target.closest(\"[data-radix-menu-content]\") === event.currentTarget;\n                const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n                const isCharacterKey = event.key.length === 1;\n                if (isKeyDownInside) {\n                  if (event.key === \"Tab\") event.preventDefault();\n                  if (!isModifierKey && isCharacterKey) handleTypeaheadSearch(event.key);\n                }\n                const content = contentRef.current;\n                if (event.target !== content) return;\n                if (!FIRST_LAST_KEYS.includes(event.key)) return;\n                event.preventDefault();\n                const items = getItems().filter(item => !item.disabled);\n                const candidateNodes = items.map(item => item.ref.current);\n                if (LAST_KEYS.includes(event.key)) candidateNodes.reverse();\n                focusFirst(candidateNodes);\n              }),\n              onBlur: composeEventHandlers(props.onBlur, event => {\n                if (!event.currentTarget.contains(event.target)) {\n                  window.clearTimeout(timerRef.current);\n                  searchRef.current = \"\";\n                }\n              }),\n              onPointerMove: composeEventHandlers(props.onPointerMove, whenMouse(event => {\n                const target = event.target;\n                const pointerXHasChanged = lastPointerXRef.current !== event.clientX;\n                if (event.currentTarget.contains(target) && pointerXHasChanged) {\n                  const newDir = event.clientX > lastPointerXRef.current ? \"right\" : \"left\";\n                  pointerDirRef.current = newDir;\n                  lastPointerXRef.current = event.clientX;\n                }\n              }))\n            }))\n          }))\n        })\n      })\n    }))\n  });\n});\nMenuContent.displayName = CONTENT_NAME;\nvar GROUP_NAME = \"MenuGroup\";\nvar MenuGroup = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeMenu\n    } = props,\n    groupProps = _objectWithoutProperties(props, _excluded4);\n  return /* @__PURE__ */jsx(Primitive.div, _objectSpread(_objectSpread({\n    role: \"group\"\n  }, groupProps), {}, {\n    ref: forwardedRef\n  }));\n});\nMenuGroup.displayName = GROUP_NAME;\nvar LABEL_NAME = \"MenuLabel\";\nvar MenuLabel = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeMenu\n    } = props,\n    labelProps = _objectWithoutProperties(props, _excluded5);\n  return /* @__PURE__ */jsx(Primitive.div, _objectSpread(_objectSpread({}, labelProps), {}, {\n    ref: forwardedRef\n  }));\n});\nMenuLabel.displayName = LABEL_NAME;\nvar ITEM_NAME = \"MenuItem\";\nvar ITEM_SELECT = \"menu.itemSelect\";\nvar MenuItem = React.forwardRef((props, forwardedRef) => {\n  const {\n      disabled = false,\n      onSelect\n    } = props,\n    itemProps = _objectWithoutProperties(props, _excluded6);\n  const ref = React.useRef(null);\n  const rootContext = useMenuRootContext(ITEM_NAME, props.__scopeMenu);\n  const contentContext = useMenuContentContext(ITEM_NAME, props.__scopeMenu);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const isPointerDownRef = React.useRef(false);\n  const handleSelect = () => {\n    const menuItem = ref.current;\n    if (!disabled && menuItem) {\n      const itemSelectEvent = new CustomEvent(ITEM_SELECT, {\n        bubbles: true,\n        cancelable: true\n      });\n      menuItem.addEventListener(ITEM_SELECT, event => onSelect === null || onSelect === void 0 ? void 0 : onSelect(event), {\n        once: true\n      });\n      dispatchDiscreteCustomEvent(menuItem, itemSelectEvent);\n      if (itemSelectEvent.defaultPrevented) {\n        isPointerDownRef.current = false;\n      } else {\n        rootContext.onClose();\n      }\n    }\n  };\n  return /* @__PURE__ */jsx(MenuItemImpl, _objectSpread(_objectSpread({}, itemProps), {}, {\n    ref: composedRefs,\n    disabled,\n    onClick: composeEventHandlers(props.onClick, handleSelect),\n    onPointerDown: event => {\n      var _props$onPointerDown;\n      (_props$onPointerDown = props.onPointerDown) === null || _props$onPointerDown === void 0 || _props$onPointerDown.call(props, event);\n      isPointerDownRef.current = true;\n    },\n    onPointerUp: composeEventHandlers(props.onPointerUp, event => {\n      var _event$currentTarget;\n      if (!isPointerDownRef.current) (_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 || _event$currentTarget.click();\n    }),\n    onKeyDown: composeEventHandlers(props.onKeyDown, event => {\n      const isTypingAhead = contentContext.searchRef.current !== \"\";\n      if (disabled || isTypingAhead && event.key === \" \") return;\n      if (SELECTION_KEYS.includes(event.key)) {\n        event.currentTarget.click();\n        event.preventDefault();\n      }\n    })\n  }));\n});\nMenuItem.displayName = ITEM_NAME;\nvar MenuItemImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeMenu,\n      disabled = false,\n      textValue\n    } = props,\n    itemProps = _objectWithoutProperties(props, _excluded7);\n  const contentContext = useMenuContentContext(ITEM_NAME, __scopeMenu);\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenu);\n  const ref = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const [isFocused, setIsFocused] = React.useState(false);\n  const [textContent, setTextContent] = React.useState(\"\");\n  React.useEffect(() => {\n    const menuItem = ref.current;\n    if (menuItem) {\n      var _menuItem$textContent;\n      setTextContent(((_menuItem$textContent = menuItem.textContent) !== null && _menuItem$textContent !== void 0 ? _menuItem$textContent : \"\").trim());\n    }\n  }, [itemProps.children]);\n  return /* @__PURE__ */jsx(Collection.ItemSlot, {\n    scope: __scopeMenu,\n    disabled,\n    textValue: textValue !== null && textValue !== void 0 ? textValue : textContent,\n    children: /* @__PURE__ */jsx(RovingFocusGroup.Item, _objectSpread(_objectSpread({\n      asChild: true\n    }, rovingFocusGroupScope), {}, {\n      focusable: !disabled,\n      children: /* @__PURE__ */jsx(Primitive.div, _objectSpread(_objectSpread({\n        role: \"menuitem\",\n        \"data-highlighted\": isFocused ? \"\" : void 0,\n        \"aria-disabled\": disabled || void 0,\n        \"data-disabled\": disabled ? \"\" : void 0\n      }, itemProps), {}, {\n        ref: composedRefs,\n        onPointerMove: composeEventHandlers(props.onPointerMove, whenMouse(event => {\n          if (disabled) {\n            contentContext.onItemLeave(event);\n          } else {\n            contentContext.onItemEnter(event);\n            if (!event.defaultPrevented) {\n              const item = event.currentTarget;\n              item.focus({\n                preventScroll: true\n              });\n            }\n          }\n        })),\n        onPointerLeave: composeEventHandlers(props.onPointerLeave, whenMouse(event => contentContext.onItemLeave(event))),\n        onFocus: composeEventHandlers(props.onFocus, () => setIsFocused(true)),\n        onBlur: composeEventHandlers(props.onBlur, () => setIsFocused(false))\n      }))\n    }))\n  });\n});\nvar CHECKBOX_ITEM_NAME = \"MenuCheckboxItem\";\nvar MenuCheckboxItem = React.forwardRef((props, forwardedRef) => {\n  const {\n      checked = false,\n      onCheckedChange\n    } = props,\n    checkboxItemProps = _objectWithoutProperties(props, _excluded8);\n  return /* @__PURE__ */jsx(ItemIndicatorProvider, {\n    scope: props.__scopeMenu,\n    checked,\n    children: /* @__PURE__ */jsx(MenuItem, _objectSpread(_objectSpread({\n      role: \"menuitemcheckbox\",\n      \"aria-checked\": isIndeterminate(checked) ? \"mixed\" : checked\n    }, checkboxItemProps), {}, {\n      ref: forwardedRef,\n      \"data-state\": getCheckedState(checked),\n      onSelect: composeEventHandlers(checkboxItemProps.onSelect, () => onCheckedChange === null || onCheckedChange === void 0 ? void 0 : onCheckedChange(isIndeterminate(checked) ? true : !checked), {\n        checkForDefaultPrevented: false\n      })\n    }))\n  });\n});\nMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\nvar RADIO_GROUP_NAME = \"MenuRadioGroup\";\nvar [RadioGroupProvider, useRadioGroupContext] = createMenuContext(RADIO_GROUP_NAME, {\n  value: void 0,\n  onValueChange: () => {}\n});\nvar MenuRadioGroup = React.forwardRef((props, forwardedRef) => {\n  const {\n      value,\n      onValueChange\n    } = props,\n    groupProps = _objectWithoutProperties(props, _excluded9);\n  const handleValueChange = useCallbackRef(onValueChange);\n  return /* @__PURE__ */jsx(RadioGroupProvider, {\n    scope: props.__scopeMenu,\n    value,\n    onValueChange: handleValueChange,\n    children: /* @__PURE__ */jsx(MenuGroup, _objectSpread(_objectSpread({}, groupProps), {}, {\n      ref: forwardedRef\n    }))\n  });\n});\nMenuRadioGroup.displayName = RADIO_GROUP_NAME;\nvar RADIO_ITEM_NAME = \"MenuRadioItem\";\nvar MenuRadioItem = React.forwardRef((props, forwardedRef) => {\n  const {\n      value\n    } = props,\n    radioItemProps = _objectWithoutProperties(props, _excluded0);\n  const context = useRadioGroupContext(RADIO_ITEM_NAME, props.__scopeMenu);\n  const checked = value === context.value;\n  return /* @__PURE__ */jsx(ItemIndicatorProvider, {\n    scope: props.__scopeMenu,\n    checked,\n    children: /* @__PURE__ */jsx(MenuItem, _objectSpread(_objectSpread({\n      role: \"menuitemradio\",\n      \"aria-checked\": checked\n    }, radioItemProps), {}, {\n      ref: forwardedRef,\n      \"data-state\": getCheckedState(checked),\n      onSelect: composeEventHandlers(radioItemProps.onSelect, () => {\n        var _context$onValueChang;\n        return (_context$onValueChang = context.onValueChange) === null || _context$onValueChang === void 0 ? void 0 : _context$onValueChang.call(context, value);\n      }, {\n        checkForDefaultPrevented: false\n      })\n    }))\n  });\n});\nMenuRadioItem.displayName = RADIO_ITEM_NAME;\nvar ITEM_INDICATOR_NAME = \"MenuItemIndicator\";\nvar [ItemIndicatorProvider, useItemIndicatorContext] = createMenuContext(ITEM_INDICATOR_NAME, {\n  checked: false\n});\nvar MenuItemIndicator = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeMenu,\n      forceMount\n    } = props,\n    itemIndicatorProps = _objectWithoutProperties(props, _excluded1);\n  const indicatorContext = useItemIndicatorContext(ITEM_INDICATOR_NAME, __scopeMenu);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || isIndeterminate(indicatorContext.checked) || indicatorContext.checked === true,\n    children: /* @__PURE__ */jsx(Primitive.span, _objectSpread(_objectSpread({}, itemIndicatorProps), {}, {\n      ref: forwardedRef,\n      \"data-state\": getCheckedState(indicatorContext.checked)\n    }))\n  });\n});\nMenuItemIndicator.displayName = ITEM_INDICATOR_NAME;\nvar SEPARATOR_NAME = \"MenuSeparator\";\nvar MenuSeparator = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeMenu\n    } = props,\n    separatorProps = _objectWithoutProperties(props, _excluded10);\n  return /* @__PURE__ */jsx(Primitive.div, _objectSpread(_objectSpread({\n    role: \"separator\",\n    \"aria-orientation\": \"horizontal\"\n  }, separatorProps), {}, {\n    ref: forwardedRef\n  }));\n});\nMenuSeparator.displayName = SEPARATOR_NAME;\nvar ARROW_NAME = \"MenuArrow\";\nvar MenuArrow = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeMenu\n    } = props,\n    arrowProps = _objectWithoutProperties(props, _excluded11);\n  const popperScope = usePopperScope(__scopeMenu);\n  return /* @__PURE__ */jsx(PopperPrimitive.Arrow, _objectSpread(_objectSpread(_objectSpread({}, popperScope), arrowProps), {}, {\n    ref: forwardedRef\n  }));\n});\nMenuArrow.displayName = ARROW_NAME;\nvar SUB_NAME = \"MenuSub\";\nvar [MenuSubProvider, useMenuSubContext] = createMenuContext(SUB_NAME);\nvar MenuSub = props => {\n  const {\n    __scopeMenu,\n    children,\n    open = false,\n    onOpenChange\n  } = props;\n  const parentMenuContext = useMenuContext(SUB_NAME, __scopeMenu);\n  const popperScope = usePopperScope(__scopeMenu);\n  const [trigger, setTrigger] = React.useState(null);\n  const [content, setContent] = React.useState(null);\n  const handleOpenChange = useCallbackRef(onOpenChange);\n  React.useEffect(() => {\n    if (parentMenuContext.open === false) handleOpenChange(false);\n    return () => handleOpenChange(false);\n  }, [parentMenuContext.open, handleOpenChange]);\n  return /* @__PURE__ */jsx(PopperPrimitive.Root, _objectSpread(_objectSpread({}, popperScope), {}, {\n    children: /* @__PURE__ */jsx(MenuProvider, {\n      scope: __scopeMenu,\n      open,\n      onOpenChange: handleOpenChange,\n      content,\n      onContentChange: setContent,\n      children: /* @__PURE__ */jsx(MenuSubProvider, {\n        scope: __scopeMenu,\n        contentId: useId(),\n        triggerId: useId(),\n        trigger,\n        onTriggerChange: setTrigger,\n        children\n      })\n    })\n  }));\n};\nMenuSub.displayName = SUB_NAME;\nvar SUB_TRIGGER_NAME = \"MenuSubTrigger\";\nvar MenuSubTrigger = React.forwardRef((props, forwardedRef) => {\n  const context = useMenuContext(SUB_TRIGGER_NAME, props.__scopeMenu);\n  const rootContext = useMenuRootContext(SUB_TRIGGER_NAME, props.__scopeMenu);\n  const subContext = useMenuSubContext(SUB_TRIGGER_NAME, props.__scopeMenu);\n  const contentContext = useMenuContentContext(SUB_TRIGGER_NAME, props.__scopeMenu);\n  const openTimerRef = React.useRef(null);\n  const {\n    pointerGraceTimerRef,\n    onPointerGraceIntentChange\n  } = contentContext;\n  const scope = {\n    __scopeMenu: props.__scopeMenu\n  };\n  const clearOpenTimer = React.useCallback(() => {\n    if (openTimerRef.current) window.clearTimeout(openTimerRef.current);\n    openTimerRef.current = null;\n  }, []);\n  React.useEffect(() => clearOpenTimer, [clearOpenTimer]);\n  React.useEffect(() => {\n    const pointerGraceTimer = pointerGraceTimerRef.current;\n    return () => {\n      window.clearTimeout(pointerGraceTimer);\n      onPointerGraceIntentChange(null);\n    };\n  }, [pointerGraceTimerRef, onPointerGraceIntentChange]);\n  return /* @__PURE__ */jsx(MenuAnchor, _objectSpread(_objectSpread({\n    asChild: true\n  }, scope), {}, {\n    children: /* @__PURE__ */jsx(MenuItemImpl, _objectSpread(_objectSpread({\n      id: subContext.triggerId,\n      \"aria-haspopup\": \"menu\",\n      \"aria-expanded\": context.open,\n      \"aria-controls\": subContext.contentId,\n      \"data-state\": getOpenState(context.open)\n    }, props), {}, {\n      ref: composeRefs(forwardedRef, subContext.onTriggerChange),\n      onClick: event => {\n        var _props$onClick;\n        (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, event);\n        if (props.disabled || event.defaultPrevented) return;\n        event.currentTarget.focus();\n        if (!context.open) context.onOpenChange(true);\n      },\n      onPointerMove: composeEventHandlers(props.onPointerMove, whenMouse(event => {\n        contentContext.onItemEnter(event);\n        if (event.defaultPrevented) return;\n        if (!props.disabled && !context.open && !openTimerRef.current) {\n          contentContext.onPointerGraceIntentChange(null);\n          openTimerRef.current = window.setTimeout(() => {\n            context.onOpenChange(true);\n            clearOpenTimer();\n          }, 100);\n        }\n      })),\n      onPointerLeave: composeEventHandlers(props.onPointerLeave, whenMouse(event => {\n        var _context$content;\n        clearOpenTimer();\n        const contentRect = (_context$content = context.content) === null || _context$content === void 0 ? void 0 : _context$content.getBoundingClientRect();\n        if (contentRect) {\n          var _context$content2;\n          const side = (_context$content2 = context.content) === null || _context$content2 === void 0 ? void 0 : _context$content2.dataset.side;\n          const rightSide = side === \"right\";\n          const bleed = rightSide ? -5 : 5;\n          const contentNearEdge = contentRect[rightSide ? \"left\" : \"right\"];\n          const contentFarEdge = contentRect[rightSide ? \"right\" : \"left\"];\n          contentContext.onPointerGraceIntentChange({\n            area: [\n            // Apply a bleed on clientX to ensure that our exit point is\n            // consistently within polygon bounds\n            {\n              x: event.clientX + bleed,\n              y: event.clientY\n            }, {\n              x: contentNearEdge,\n              y: contentRect.top\n            }, {\n              x: contentFarEdge,\n              y: contentRect.top\n            }, {\n              x: contentFarEdge,\n              y: contentRect.bottom\n            }, {\n              x: contentNearEdge,\n              y: contentRect.bottom\n            }],\n            side\n          });\n          window.clearTimeout(pointerGraceTimerRef.current);\n          pointerGraceTimerRef.current = window.setTimeout(() => contentContext.onPointerGraceIntentChange(null), 300);\n        } else {\n          contentContext.onTriggerLeave(event);\n          if (event.defaultPrevented) return;\n          contentContext.onPointerGraceIntentChange(null);\n        }\n      })),\n      onKeyDown: composeEventHandlers(props.onKeyDown, event => {\n        const isTypingAhead = contentContext.searchRef.current !== \"\";\n        if (props.disabled || isTypingAhead && event.key === \" \") return;\n        if (SUB_OPEN_KEYS[rootContext.dir].includes(event.key)) {\n          var _context$content3;\n          context.onOpenChange(true);\n          (_context$content3 = context.content) === null || _context$content3 === void 0 || _context$content3.focus();\n          event.preventDefault();\n        }\n      })\n    }))\n  }));\n});\nMenuSubTrigger.displayName = SUB_TRIGGER_NAME;\nvar SUB_CONTENT_NAME = \"MenuSubContent\";\nvar MenuSubContent = React.forwardRef((props, forwardedRef) => {\n  const portalContext = usePortalContext(CONTENT_NAME, props.__scopeMenu);\n  const {\n      forceMount = portalContext.forceMount\n    } = props,\n    subContentProps = _objectWithoutProperties(props, _excluded12);\n  const context = useMenuContext(CONTENT_NAME, props.__scopeMenu);\n  const rootContext = useMenuRootContext(CONTENT_NAME, props.__scopeMenu);\n  const subContext = useMenuSubContext(SUB_CONTENT_NAME, props.__scopeMenu);\n  const ref = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  return /* @__PURE__ */jsx(Collection.Provider, {\n    scope: props.__scopeMenu,\n    children: /* @__PURE__ */jsx(Presence, {\n      present: forceMount || context.open,\n      children: /* @__PURE__ */jsx(Collection.Slot, {\n        scope: props.__scopeMenu,\n        children: /* @__PURE__ */jsx(MenuContentImpl, _objectSpread(_objectSpread({\n          id: subContext.contentId,\n          \"aria-labelledby\": subContext.triggerId\n        }, subContentProps), {}, {\n          ref: composedRefs,\n          align: \"start\",\n          side: rootContext.dir === \"rtl\" ? \"left\" : \"right\",\n          disableOutsidePointerEvents: false,\n          disableOutsideScroll: false,\n          trapFocus: false,\n          onOpenAutoFocus: event => {\n            var _ref$current;\n            if (rootContext.isUsingKeyboardRef.current) (_ref$current = ref.current) === null || _ref$current === void 0 || _ref$current.focus();\n            event.preventDefault();\n          },\n          onCloseAutoFocus: event => event.preventDefault(),\n          onFocusOutside: composeEventHandlers(props.onFocusOutside, event => {\n            if (event.target !== subContext.trigger) context.onOpenChange(false);\n          }),\n          onEscapeKeyDown: composeEventHandlers(props.onEscapeKeyDown, event => {\n            rootContext.onClose();\n            event.preventDefault();\n          }),\n          onKeyDown: composeEventHandlers(props.onKeyDown, event => {\n            const isKeyDownInside = event.currentTarget.contains(event.target);\n            const isCloseKey = SUB_CLOSE_KEYS[rootContext.dir].includes(event.key);\n            if (isKeyDownInside && isCloseKey) {\n              var _subContext$trigger;\n              context.onOpenChange(false);\n              (_subContext$trigger = subContext.trigger) === null || _subContext$trigger === void 0 || _subContext$trigger.focus();\n              event.preventDefault();\n            }\n          })\n        }))\n      })\n    })\n  });\n});\nMenuSubContent.displayName = SUB_CONTENT_NAME;\nfunction getOpenState(open) {\n  return open ? \"open\" : \"closed\";\n}\nfunction isIndeterminate(checked) {\n  return checked === \"indeterminate\";\n}\nfunction getCheckedState(checked) {\n  return isIndeterminate(checked) ? \"indeterminate\" : checked ? \"checked\" : \"unchecked\";\n}\nfunction focusFirst(candidates) {\n  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n  for (const candidate of candidates) {\n    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n    candidate.focus();\n    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n  }\n}\nfunction wrapArray(array, startIndex) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\nfunction getNextMatch(values, search, currentMatch) {\n  const isRepeated = search.length > 1 && Array.from(search).every(char => char === search[0]);\n  const normalizedSearch = isRepeated ? search[0] : search;\n  const currentMatchIndex = currentMatch ? values.indexOf(currentMatch) : -1;\n  let wrappedValues = wrapArray(values, Math.max(currentMatchIndex, 0));\n  const excludeCurrentMatch = normalizedSearch.length === 1;\n  if (excludeCurrentMatch) wrappedValues = wrappedValues.filter(v => v !== currentMatch);\n  const nextMatch = wrappedValues.find(value => value.toLowerCase().startsWith(normalizedSearch.toLowerCase()));\n  return nextMatch !== currentMatch ? nextMatch : void 0;\n}\nfunction isPointInPolygon(point, polygon) {\n  const {\n    x,\n    y\n  } = point;\n  let inside = false;\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const ii = polygon[i];\n    const jj = polygon[j];\n    const xi = ii.x;\n    const yi = ii.y;\n    const xj = jj.x;\n    const yj = jj.y;\n    const intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n    if (intersect) inside = !inside;\n  }\n  return inside;\n}\nfunction isPointerInGraceArea(event, area) {\n  if (!area) return false;\n  const cursorPos = {\n    x: event.clientX,\n    y: event.clientY\n  };\n  return isPointInPolygon(cursorPos, area);\n}\nfunction whenMouse(handler) {\n  return event => event.pointerType === \"mouse\" ? handler(event) : void 0;\n}\nvar Root3 = Menu;\nvar Anchor2 = MenuAnchor;\nvar Portal = MenuPortal;\nvar Content2 = MenuContent;\nvar Group = MenuGroup;\nvar Label = MenuLabel;\nvar Item2 = MenuItem;\nvar CheckboxItem = MenuCheckboxItem;\nvar RadioGroup = MenuRadioGroup;\nvar RadioItem = MenuRadioItem;\nvar ItemIndicator = MenuItemIndicator;\nvar Separator = MenuSeparator;\nvar Arrow2 = MenuArrow;\nvar Sub = MenuSub;\nvar SubTrigger = MenuSubTrigger;\nvar SubContent = MenuSubContent;\nexport { Anchor2 as Anchor, Arrow2 as Arrow, CheckboxItem, Content2 as Content, Group, Item2 as Item, ItemIndicator, Label, Menu, MenuAnchor, MenuArrow, MenuCheckboxItem, MenuContent, MenuGroup, MenuItem, MenuItemIndicator, MenuLabel, MenuPortal, MenuRadioGroup, MenuRadioItem, MenuSeparator, MenuSub, MenuSubContent, MenuSubTrigger, Portal, RadioGroup, RadioItem, Root3 as Root, Separator, Sub, SubContent, SubTrigger, createMenuScope };","map":{"version":3,"names":["React","composeEventHandlers","createCollection","useComposedRefs","composeRefs","createContextScope","useDirection","DismissableLayer","useFocusGuards","FocusScope","useId","PopperPrimitive","createPopperScope","Portal","PortalPrimitive","Presence","Primitive","dispatchDiscreteCustomEvent","RovingFocusGroup","createRovingFocusGroupScope","createSlot","useCallbackRef","hideOthers","RemoveScroll","jsx","SELECTION_KEYS","FIRST_KEYS","LAST_KEYS","FIRST_LAST_KEYS","SUB_OPEN_KEYS","ltr","rtl","SUB_CLOSE_KEYS","MENU_NAME","Collection","useCollection","createCollectionScope","createMenuContext","createMenuScope","usePopperScope","useRovingFocusGroupScope","MenuProvider","useMenuContext","MenuRootProvider","useMenuRootContext","Menu","props","__scopeMenu","open","children","dir","onOpenChange","modal","popperScope","content","setContent","useState","isUsingKeyboardRef","useRef","handleOpenChange","direction","useEffect","handleKeyDown","current","document","addEventListener","handlePointer","capture","once","removeEventListener","Root","_objectSpread","scope","onContentChange","onClose","useCallback","displayName","ANCHOR_NAME","MenuAnchor","forwardRef","forwardedRef","anchorProps","_objectWithoutProperties","_excluded","Anchor","ref","PORTAL_NAME","PortalProvider","usePortalContext","forceMount","MenuPortal","container","context","present","asChild","CONTENT_NAME","MenuContentProvider","useMenuContentContext","MenuContent","portalContext","contentProps","_excluded2","rootContext","Provider","Slot","MenuRootContentModal","MenuRootContentNonModal","composedRefs","MenuContentImpl","trapFocus","disableOutsidePointerEvents","disableOutsideScroll","onFocusOutside","event","preventDefault","checkForDefaultPrevented","onDismiss","loop","onOpenAutoFocus","onCloseAutoFocus","onEntryFocus","onEscapeKeyDown","onPointerDownOutside","onInteractOutside","_excluded3","rovingFocusGroupScope","getItems","currentItemId","setCurrentItemId","contentRef","timerRef","searchRef","pointerGraceTimerRef","pointerGraceIntentRef","pointerDirRef","lastPointerXRef","ScrollLockWrapper","Fragment","scrollLockWrapperProps","as","allowPinchZoom","handleTypeaheadSearch","key","_items$find","_items$find2","search","items","filter","item","disabled","currentItem","activeElement","currentMatch","find","textValue","values","map","nextMatch","getNextMatch","newItem","updateSearch","value","window","clearTimeout","setTimeout","focus","isPointerMovingToSubmenu","_pointerGraceIntentRe","_pointerGraceIntentRe2","isMovingTowards","side","isPointerInGraceArea","area","onItemEnter","onItemLeave","_contentRef$current","onTriggerLeave","onPointerGraceIntentChange","intent","trapped","onMountAutoFocus","_contentRef$current2","preventScroll","onUnmountAutoFocus","orientation","currentTabStopId","onCurrentTabStopIdChange","preventScrollOnEntryFocus","Content","role","getOpenState","style","outline","onKeyDown","target","isKeyDownInside","closest","currentTarget","isModifierKey","ctrlKey","altKey","metaKey","isCharacterKey","length","includes","candidateNodes","reverse","focusFirst","onBlur","contains","onPointerMove","whenMouse","pointerXHasChanged","clientX","newDir","GROUP_NAME","MenuGroup","groupProps","_excluded4","div","LABEL_NAME","MenuLabel","labelProps","_excluded5","ITEM_NAME","ITEM_SELECT","MenuItem","onSelect","itemProps","_excluded6","contentContext","isPointerDownRef","handleSelect","menuItem","itemSelectEvent","CustomEvent","bubbles","cancelable","defaultPrevented","MenuItemImpl","onClick","onPointerDown","_props$onPointerDown","call","onPointerUp","_event$currentTarget","click","isTypingAhead","_excluded7","isFocused","setIsFocused","textContent","setTextContent","_menuItem$textContent","trim","ItemSlot","Item","focusable","onPointerLeave","onFocus","CHECKBOX_ITEM_NAME","MenuCheckboxItem","checked","onCheckedChange","checkboxItemProps","_excluded8","ItemIndicatorProvider","isIndeterminate","getCheckedState","RADIO_GROUP_NAME","RadioGroupProvider","useRadioGroupContext","onValueChange","MenuRadioGroup","_excluded9","handleValueChange","RADIO_ITEM_NAME","MenuRadioItem","radioItemProps","_excluded0","_context$onValueChang","ITEM_INDICATOR_NAME","useItemIndicatorContext","MenuItemIndicator","itemIndicatorProps","_excluded1","indicatorContext","span","SEPARATOR_NAME","MenuSeparator","separatorProps","_excluded10","ARROW_NAME","MenuArrow","arrowProps","_excluded11","Arrow","SUB_NAME","MenuSubProvider","useMenuSubContext","MenuSub","parentMenuContext","trigger","setTrigger","contentId","triggerId","onTriggerChange","SUB_TRIGGER_NAME","MenuSubTrigger","subContext","openTimerRef","clearOpenTimer","pointerGraceTimer","id","_props$onClick","_context$content","contentRect","getBoundingClientRect","_context$content2","dataset","rightSide","bleed","contentNearEdge","contentFarEdge","x","y","clientY","top","bottom","_context$content3","SUB_CONTENT_NAME","MenuSubContent","subContentProps","_excluded12","align","_ref$current","isCloseKey","_subContext$trigger","candidates","PREVIOUSLY_FOCUSED_ELEMENT","candidate","wrapArray","array","startIndex","_","index","isRepeated","Array","from","every","char","normalizedSearch","currentMatchIndex","indexOf","wrappedValues","Math","max","excludeCurrentMatch","v","toLowerCase","startsWith","isPointInPolygon","point","polygon","inside","i","j","ii","jj","xi","yi","xj","yj","intersect","cursorPos","handler","pointerType","Root3","Anchor2","Content2","Group","Label","Item2","CheckboxItem","RadioGroup","RadioItem","ItemIndicator","Separator","Arrow2","Sub","SubTrigger","SubContent"],"sources":["/Users/ericmeltser/Downloads/playright_frontend/node_modules/@radix-ui/react-menu/src/menu.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs, composeRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { useId } from '@radix-ui/react-id';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive, dispatchDiscreteCustomEvent } from '@radix-ui/react-primitive';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { createSlot } from '@radix-ui/react-slot';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { hideOthers } from 'aria-hidden';\nimport { RemoveScroll } from 'react-remove-scroll';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\n\nconst SELECTION_KEYS = ['Enter', ' '];\nconst FIRST_KEYS = ['ArrowDown', 'PageUp', 'Home'];\nconst LAST_KEYS = ['ArrowUp', 'PageDown', 'End'];\nconst FIRST_LAST_KEYS = [...FIRST_KEYS, ...LAST_KEYS];\nconst SUB_OPEN_KEYS: Record<Direction, string[]> = {\n  ltr: [...SELECTION_KEYS, 'ArrowRight'],\n  rtl: [...SELECTION_KEYS, 'ArrowLeft'],\n};\nconst SUB_CLOSE_KEYS: Record<Direction, string[]> = {\n  ltr: ['ArrowLeft'],\n  rtl: ['ArrowRight'],\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Menu\n * -----------------------------------------------------------------------------------------------*/\n\nconst MENU_NAME = 'Menu';\n\ntype ItemData = { disabled: boolean; textValue: string };\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  MenuItemElement,\n  ItemData\n>(MENU_NAME);\n\ntype ScopedProps<P> = P & { __scopeMenu?: Scope };\nconst [createMenuContext, createMenuScope] = createContextScope(MENU_NAME, [\n  createCollectionScope,\n  createPopperScope,\n  createRovingFocusGroupScope,\n]);\nconst usePopperScope = createPopperScope();\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\n\ntype MenuContextValue = {\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  content: MenuContentElement | null;\n  onContentChange(content: MenuContentElement | null): void;\n};\n\nconst [MenuProvider, useMenuContext] = createMenuContext<MenuContextValue>(MENU_NAME);\n\ntype MenuRootContextValue = {\n  onClose(): void;\n  isUsingKeyboardRef: React.RefObject<boolean>;\n  dir: Direction;\n  modal: boolean;\n};\n\nconst [MenuRootProvider, useMenuRootContext] = createMenuContext<MenuRootContextValue>(MENU_NAME);\n\ninterface MenuProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  onOpenChange?(open: boolean): void;\n  dir?: Direction;\n  modal?: boolean;\n}\n\nconst Menu: React.FC<MenuProps> = (props: ScopedProps<MenuProps>) => {\n  const { __scopeMenu, open = false, children, dir, onOpenChange, modal = true } = props;\n  const popperScope = usePopperScope(__scopeMenu);\n  const [content, setContent] = React.useState<MenuContentElement | null>(null);\n  const isUsingKeyboardRef = React.useRef(false);\n  const handleOpenChange = useCallbackRef(onOpenChange);\n  const direction = useDirection(dir);\n\n  React.useEffect(() => {\n    // Capture phase ensures we set the boolean before any side effects execute\n    // in response to the key or pointer event as they might depend on this value.\n    const handleKeyDown = () => {\n      isUsingKeyboardRef.current = true;\n      document.addEventListener('pointerdown', handlePointer, { capture: true, once: true });\n      document.addEventListener('pointermove', handlePointer, { capture: true, once: true });\n    };\n    const handlePointer = () => (isUsingKeyboardRef.current = false);\n    document.addEventListener('keydown', handleKeyDown, { capture: true });\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, { capture: true });\n      document.removeEventListener('pointerdown', handlePointer, { capture: true });\n      document.removeEventListener('pointermove', handlePointer, { capture: true });\n    };\n  }, []);\n\n  return (\n    <PopperPrimitive.Root {...popperScope}>\n      <MenuProvider\n        scope={__scopeMenu}\n        open={open}\n        onOpenChange={handleOpenChange}\n        content={content}\n        onContentChange={setContent}\n      >\n        <MenuRootProvider\n          scope={__scopeMenu}\n          onClose={React.useCallback(() => handleOpenChange(false), [handleOpenChange])}\n          isUsingKeyboardRef={isUsingKeyboardRef}\n          dir={direction}\n          modal={modal}\n        >\n          {children}\n        </MenuRootProvider>\n      </MenuProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nMenu.displayName = MENU_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuAnchor\n * -----------------------------------------------------------------------------------------------*/\n\nconst ANCHOR_NAME = 'MenuAnchor';\n\ntype MenuAnchorElement = React.ComponentRef<typeof PopperPrimitive.Anchor>;\ntype PopperAnchorProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Anchor>;\ninterface MenuAnchorProps extends PopperAnchorProps {}\n\nconst MenuAnchor = React.forwardRef<MenuAnchorElement, MenuAnchorProps>(\n  (props: ScopedProps<MenuAnchorProps>, forwardedRef) => {\n    const { __scopeMenu, ...anchorProps } = props;\n    const popperScope = usePopperScope(__scopeMenu);\n    return <PopperPrimitive.Anchor {...popperScope} {...anchorProps} ref={forwardedRef} />;\n  }\n);\n\nMenuAnchor.displayName = ANCHOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'MenuPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createMenuContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface MenuPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst MenuPortal: React.FC<MenuPortalProps> = (props: ScopedProps<MenuPortalProps>) => {\n  const { __scopeMenu, forceMount, children, container } = props;\n  const context = useMenuContext(PORTAL_NAME, __scopeMenu);\n  return (\n    <PortalProvider scope={__scopeMenu} forceMount={forceMount}>\n      <Presence present={forceMount || context.open}>\n        <PortalPrimitive asChild container={container}>\n          {children}\n        </PortalPrimitive>\n      </Presence>\n    </PortalProvider>\n  );\n};\n\nMenuPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'MenuContent';\n\ntype MenuContentContextValue = {\n  onItemEnter(event: React.PointerEvent): void;\n  onItemLeave(event: React.PointerEvent): void;\n  onTriggerLeave(event: React.PointerEvent): void;\n  searchRef: React.RefObject<string>;\n  pointerGraceTimerRef: React.MutableRefObject<number>;\n  onPointerGraceIntentChange(intent: GraceIntent | null): void;\n};\nconst [MenuContentProvider, useMenuContentContext] =\n  createMenuContext<MenuContentContextValue>(CONTENT_NAME);\n\ntype MenuContentElement = MenuRootContentTypeElement;\n/**\n * We purposefully don't union MenuRootContent and MenuSubContent props here because\n * they have conflicting prop types. We agreed that we would allow MenuSubContent to\n * accept props that it would just ignore.\n */\ninterface MenuContentProps extends MenuRootContentTypeProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst MenuContent = React.forwardRef<MenuContentElement, MenuContentProps>(\n  (props: ScopedProps<MenuContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeMenu);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = useMenuContext(CONTENT_NAME, props.__scopeMenu);\n    const rootContext = useMenuRootContext(CONTENT_NAME, props.__scopeMenu);\n\n    return (\n      <Collection.Provider scope={props.__scopeMenu}>\n        <Presence present={forceMount || context.open}>\n          <Collection.Slot scope={props.__scopeMenu}>\n            {rootContext.modal ? (\n              <MenuRootContentModal {...contentProps} ref={forwardedRef} />\n            ) : (\n              <MenuRootContentNonModal {...contentProps} ref={forwardedRef} />\n            )}\n          </Collection.Slot>\n        </Presence>\n      </Collection.Provider>\n    );\n  }\n);\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype MenuRootContentTypeElement = MenuContentImplElement;\ninterface MenuRootContentTypeProps\n  extends Omit<MenuContentImplProps, keyof MenuContentImplPrivateProps> {}\n\nconst MenuRootContentModal = React.forwardRef<MenuRootContentTypeElement, MenuRootContentTypeProps>(\n  (props: ScopedProps<MenuRootContentTypeProps>, forwardedRef) => {\n    const context = useMenuContext(CONTENT_NAME, props.__scopeMenu);\n    const ref = React.useRef<MenuRootContentTypeElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n\n    // Hide everything from ARIA except the `MenuContent`\n    React.useEffect(() => {\n      const content = ref.current;\n      if (content) return hideOthers(content);\n    }, []);\n\n    return (\n      <MenuContentImpl\n        {...props}\n        ref={composedRefs}\n        // we make sure we're not trapping once it's been closed\n        // (closed !== unmounted when animating out)\n        trapFocus={context.open}\n        // make sure to only disable pointer events when open\n        // this avoids blocking interactions while animating out\n        disableOutsidePointerEvents={context.open}\n        disableOutsideScroll\n        // When focus is trapped, a `focusout` event may still happen.\n        // We make sure we don't trigger our `onDismiss` in such case.\n        onFocusOutside={composeEventHandlers(\n          props.onFocusOutside,\n          (event) => event.preventDefault(),\n          { checkForDefaultPrevented: false }\n        )}\n        onDismiss={() => context.onOpenChange(false)}\n      />\n    );\n  }\n);\n\nconst MenuRootContentNonModal = React.forwardRef<\n  MenuRootContentTypeElement,\n  MenuRootContentTypeProps\n>((props: ScopedProps<MenuRootContentTypeProps>, forwardedRef) => {\n  const context = useMenuContext(CONTENT_NAME, props.__scopeMenu);\n  return (\n    <MenuContentImpl\n      {...props}\n      ref={forwardedRef}\n      trapFocus={false}\n      disableOutsidePointerEvents={false}\n      disableOutsideScroll={false}\n      onDismiss={() => context.onOpenChange(false)}\n    />\n  );\n});\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype MenuContentImplElement = React.ComponentRef<typeof PopperPrimitive.Content>;\ntype FocusScopeProps = React.ComponentPropsWithoutRef<typeof FocusScope>;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype RovingFocusGroupProps = React.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype PopperContentProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ntype MenuContentImplPrivateProps = {\n  onOpenAutoFocus?: FocusScopeProps['onMountAutoFocus'];\n  onDismiss?: DismissableLayerProps['onDismiss'];\n  disableOutsidePointerEvents?: DismissableLayerProps['disableOutsidePointerEvents'];\n\n  /**\n   * Whether scrolling outside the `MenuContent` should be prevented\n   * (default: `false`)\n   */\n  disableOutsideScroll?: boolean;\n\n  /**\n   * Whether focus should be trapped within the `MenuContent`\n   * (default: false)\n   */\n  trapFocus?: FocusScopeProps['trapped'];\n};\ninterface MenuContentImplProps\n  extends MenuContentImplPrivateProps,\n    Omit<PopperContentProps, 'dir' | 'onPlaced'> {\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n\n  /**\n   * Whether keyboard navigation should loop around\n   * @defaultValue false\n   */\n  loop?: RovingFocusGroupProps['loop'];\n\n  onEntryFocus?: RovingFocusGroupProps['onEntryFocus'];\n  onEscapeKeyDown?: DismissableLayerProps['onEscapeKeyDown'];\n  onPointerDownOutside?: DismissableLayerProps['onPointerDownOutside'];\n  onFocusOutside?: DismissableLayerProps['onFocusOutside'];\n  onInteractOutside?: DismissableLayerProps['onInteractOutside'];\n}\n\nconst Slot = createSlot('MenuContent.ScrollLock');\n\nconst MenuContentImpl = React.forwardRef<MenuContentImplElement, MenuContentImplProps>(\n  (props: ScopedProps<MenuContentImplProps>, forwardedRef) => {\n    const {\n      __scopeMenu,\n      loop = false,\n      trapFocus,\n      onOpenAutoFocus,\n      onCloseAutoFocus,\n      disableOutsidePointerEvents,\n      onEntryFocus,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      onFocusOutside,\n      onInteractOutside,\n      onDismiss,\n      disableOutsideScroll,\n      ...contentProps\n    } = props;\n    const context = useMenuContext(CONTENT_NAME, __scopeMenu);\n    const rootContext = useMenuRootContext(CONTENT_NAME, __scopeMenu);\n    const popperScope = usePopperScope(__scopeMenu);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenu);\n    const getItems = useCollection(__scopeMenu);\n    const [currentItemId, setCurrentItemId] = React.useState<string | null>(null);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef, context.onContentChange);\n    const timerRef = React.useRef(0);\n    const searchRef = React.useRef('');\n    const pointerGraceTimerRef = React.useRef(0);\n    const pointerGraceIntentRef = React.useRef<GraceIntent | null>(null);\n    const pointerDirRef = React.useRef<Side>('right');\n    const lastPointerXRef = React.useRef(0);\n\n    const ScrollLockWrapper = disableOutsideScroll ? RemoveScroll : React.Fragment;\n    const scrollLockWrapperProps = disableOutsideScroll\n      ? { as: Slot, allowPinchZoom: true }\n      : undefined;\n\n    const handleTypeaheadSearch = (key: string) => {\n      const search = searchRef.current + key;\n      const items = getItems().filter((item) => !item.disabled);\n      const currentItem = document.activeElement;\n      const currentMatch = items.find((item) => item.ref.current === currentItem)?.textValue;\n      const values = items.map((item) => item.textValue);\n      const nextMatch = getNextMatch(values, search, currentMatch);\n      const newItem = items.find((item) => item.textValue === nextMatch)?.ref.current;\n\n      // Reset `searchRef` 1 second after it was last updated\n      (function updateSearch(value: string) {\n        searchRef.current = value;\n        window.clearTimeout(timerRef.current);\n        if (value !== '') timerRef.current = window.setTimeout(() => updateSearch(''), 1000);\n      })(search);\n\n      if (newItem) {\n        /**\n         * Imperative focus during keydown is risky so we prevent React's batching updates\n         * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n         */\n        setTimeout(() => (newItem as HTMLElement).focus());\n      }\n    };\n\n    React.useEffect(() => {\n      return () => window.clearTimeout(timerRef.current);\n    }, []);\n\n    // Make sure the whole tree has focus guards as our `MenuContent` may be\n    // the last element in the DOM (because of the `Portal`)\n    useFocusGuards();\n\n    const isPointerMovingToSubmenu = React.useCallback((event: React.PointerEvent) => {\n      const isMovingTowards = pointerDirRef.current === pointerGraceIntentRef.current?.side;\n      return isMovingTowards && isPointerInGraceArea(event, pointerGraceIntentRef.current?.area);\n    }, []);\n\n    return (\n      <MenuContentProvider\n        scope={__scopeMenu}\n        searchRef={searchRef}\n        onItemEnter={React.useCallback(\n          (event) => {\n            if (isPointerMovingToSubmenu(event)) event.preventDefault();\n          },\n          [isPointerMovingToSubmenu]\n        )}\n        onItemLeave={React.useCallback(\n          (event) => {\n            if (isPointerMovingToSubmenu(event)) return;\n            contentRef.current?.focus();\n            setCurrentItemId(null);\n          },\n          [isPointerMovingToSubmenu]\n        )}\n        onTriggerLeave={React.useCallback(\n          (event) => {\n            if (isPointerMovingToSubmenu(event)) event.preventDefault();\n          },\n          [isPointerMovingToSubmenu]\n        )}\n        pointerGraceTimerRef={pointerGraceTimerRef}\n        onPointerGraceIntentChange={React.useCallback((intent) => {\n          pointerGraceIntentRef.current = intent;\n        }, [])}\n      >\n        <ScrollLockWrapper {...scrollLockWrapperProps}>\n          <FocusScope\n            asChild\n            trapped={trapFocus}\n            onMountAutoFocus={composeEventHandlers(onOpenAutoFocus, (event) => {\n              // when opening, explicitly focus the content area only and leave\n              // `onEntryFocus` in  control of focusing first item\n              event.preventDefault();\n              contentRef.current?.focus({ preventScroll: true });\n            })}\n            onUnmountAutoFocus={onCloseAutoFocus}\n          >\n            <DismissableLayer\n              asChild\n              disableOutsidePointerEvents={disableOutsidePointerEvents}\n              onEscapeKeyDown={onEscapeKeyDown}\n              onPointerDownOutside={onPointerDownOutside}\n              onFocusOutside={onFocusOutside}\n              onInteractOutside={onInteractOutside}\n              onDismiss={onDismiss}\n            >\n              <RovingFocusGroup.Root\n                asChild\n                {...rovingFocusGroupScope}\n                dir={rootContext.dir}\n                orientation=\"vertical\"\n                loop={loop}\n                currentTabStopId={currentItemId}\n                onCurrentTabStopIdChange={setCurrentItemId}\n                onEntryFocus={composeEventHandlers(onEntryFocus, (event) => {\n                  // only focus first item when using keyboard\n                  if (!rootContext.isUsingKeyboardRef.current) event.preventDefault();\n                })}\n                preventScrollOnEntryFocus\n              >\n                <PopperPrimitive.Content\n                  role=\"menu\"\n                  aria-orientation=\"vertical\"\n                  data-state={getOpenState(context.open)}\n                  data-radix-menu-content=\"\"\n                  dir={rootContext.dir}\n                  {...popperScope}\n                  {...contentProps}\n                  ref={composedRefs}\n                  style={{ outline: 'none', ...contentProps.style }}\n                  onKeyDown={composeEventHandlers(contentProps.onKeyDown, (event) => {\n                    // submenu key events bubble through portals. We only care about keys in this menu.\n                    const target = event.target as HTMLElement;\n                    const isKeyDownInside =\n                      target.closest('[data-radix-menu-content]') === event.currentTarget;\n                    const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n                    const isCharacterKey = event.key.length === 1;\n                    if (isKeyDownInside) {\n                      // menus should not be navigated using tab key so we prevent it\n                      if (event.key === 'Tab') event.preventDefault();\n                      if (!isModifierKey && isCharacterKey) handleTypeaheadSearch(event.key);\n                    }\n                    // focus first/last item based on key pressed\n                    const content = contentRef.current;\n                    if (event.target !== content) return;\n                    if (!FIRST_LAST_KEYS.includes(event.key)) return;\n                    event.preventDefault();\n                    const items = getItems().filter((item) => !item.disabled);\n                    const candidateNodes = items.map((item) => item.ref.current!);\n                    if (LAST_KEYS.includes(event.key)) candidateNodes.reverse();\n                    focusFirst(candidateNodes);\n                  })}\n                  onBlur={composeEventHandlers(props.onBlur, (event) => {\n                    // clear search buffer when leaving the menu\n                    if (!event.currentTarget.contains(event.target)) {\n                      window.clearTimeout(timerRef.current);\n                      searchRef.current = '';\n                    }\n                  })}\n                  onPointerMove={composeEventHandlers(\n                    props.onPointerMove,\n                    whenMouse((event) => {\n                      const target = event.target as HTMLElement;\n                      const pointerXHasChanged = lastPointerXRef.current !== event.clientX;\n\n                      // We don't use `event.movementX` for this check because Safari will\n                      // always return `0` on a pointer event.\n                      if (event.currentTarget.contains(target) && pointerXHasChanged) {\n                        const newDir = event.clientX > lastPointerXRef.current ? 'right' : 'left';\n                        pointerDirRef.current = newDir;\n                        lastPointerXRef.current = event.clientX;\n                      }\n                    })\n                  )}\n                />\n              </RovingFocusGroup.Root>\n            </DismissableLayer>\n          </FocusScope>\n        </ScrollLockWrapper>\n      </MenuContentProvider>\n    );\n  }\n);\n\nMenuContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'MenuGroup';\n\ntype MenuGroupElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface MenuGroupProps extends PrimitiveDivProps {}\n\nconst MenuGroup = React.forwardRef<MenuGroupElement, MenuGroupProps>(\n  (props: ScopedProps<MenuGroupProps>, forwardedRef) => {\n    const { __scopeMenu, ...groupProps } = props;\n    return <Primitive.div role=\"group\" {...groupProps} ref={forwardedRef} />;\n  }\n);\n\nMenuGroup.displayName = GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'MenuLabel';\n\ntype MenuLabelElement = React.ComponentRef<typeof Primitive.div>;\ninterface MenuLabelProps extends PrimitiveDivProps {}\n\nconst MenuLabel = React.forwardRef<MenuLabelElement, MenuLabelProps>(\n  (props: ScopedProps<MenuLabelProps>, forwardedRef) => {\n    const { __scopeMenu, ...labelProps } = props;\n    return <Primitive.div {...labelProps} ref={forwardedRef} />;\n  }\n);\n\nMenuLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'MenuItem';\nconst ITEM_SELECT = 'menu.itemSelect';\n\ntype MenuItemElement = MenuItemImplElement;\ninterface MenuItemProps extends Omit<MenuItemImplProps, 'onSelect'> {\n  onSelect?: (event: Event) => void;\n}\n\nconst MenuItem = React.forwardRef<MenuItemElement, MenuItemProps>(\n  (props: ScopedProps<MenuItemProps>, forwardedRef) => {\n    const { disabled = false, onSelect, ...itemProps } = props;\n    const ref = React.useRef<HTMLDivElement>(null);\n    const rootContext = useMenuRootContext(ITEM_NAME, props.__scopeMenu);\n    const contentContext = useMenuContentContext(ITEM_NAME, props.__scopeMenu);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const isPointerDownRef = React.useRef(false);\n\n    const handleSelect = () => {\n      const menuItem = ref.current;\n      if (!disabled && menuItem) {\n        const itemSelectEvent = new CustomEvent(ITEM_SELECT, { bubbles: true, cancelable: true });\n        menuItem.addEventListener(ITEM_SELECT, (event) => onSelect?.(event), { once: true });\n        dispatchDiscreteCustomEvent(menuItem, itemSelectEvent);\n        if (itemSelectEvent.defaultPrevented) {\n          isPointerDownRef.current = false;\n        } else {\n          rootContext.onClose();\n        }\n      }\n    };\n\n    return (\n      <MenuItemImpl\n        {...itemProps}\n        ref={composedRefs}\n        disabled={disabled}\n        onClick={composeEventHandlers(props.onClick, handleSelect)}\n        onPointerDown={(event) => {\n          props.onPointerDown?.(event);\n          isPointerDownRef.current = true;\n        }}\n        onPointerUp={composeEventHandlers(props.onPointerUp, (event) => {\n          // Pointer down can move to a different menu item which should activate it on pointer up.\n          // We dispatch a click for selection to allow composition with click based triggers and to\n          // prevent Firefox from getting stuck in text selection mode when the menu closes.\n          if (!isPointerDownRef.current) event.currentTarget?.click();\n        })}\n        onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n          const isTypingAhead = contentContext.searchRef.current !== '';\n          if (disabled || (isTypingAhead && event.key === ' ')) return;\n          if (SELECTION_KEYS.includes(event.key)) {\n            event.currentTarget.click();\n            /**\n             * We prevent default browser behaviour for selection keys as they should trigger\n             * a selection only:\n             * - prevents space from scrolling the page.\n             * - if keydown causes focus to move, prevents keydown from firing on the new target.\n             */\n            event.preventDefault();\n          }\n        })}\n      />\n    );\n  }\n);\n\nMenuItem.displayName = ITEM_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype MenuItemImplElement = React.ComponentRef<typeof Primitive.div>;\ninterface MenuItemImplProps extends PrimitiveDivProps {\n  disabled?: boolean;\n  textValue?: string;\n}\n\nconst MenuItemImpl = React.forwardRef<MenuItemImplElement, MenuItemImplProps>(\n  (props: ScopedProps<MenuItemImplProps>, forwardedRef) => {\n    const { __scopeMenu, disabled = false, textValue, ...itemProps } = props;\n    const contentContext = useMenuContentContext(ITEM_NAME, __scopeMenu);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenu);\n    const ref = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const [isFocused, setIsFocused] = React.useState(false);\n\n    // get the item's `.textContent` as default strategy for typeahead `textValue`\n    const [textContent, setTextContent] = React.useState('');\n    React.useEffect(() => {\n      const menuItem = ref.current;\n      if (menuItem) {\n        setTextContent((menuItem.textContent ?? '').trim());\n      }\n    }, [itemProps.children]);\n\n    return (\n      <Collection.ItemSlot\n        scope={__scopeMenu}\n        disabled={disabled}\n        textValue={textValue ?? textContent}\n      >\n        <RovingFocusGroup.Item asChild {...rovingFocusGroupScope} focusable={!disabled}>\n          <Primitive.div\n            role=\"menuitem\"\n            data-highlighted={isFocused ? '' : undefined}\n            aria-disabled={disabled || undefined}\n            data-disabled={disabled ? '' : undefined}\n            {...itemProps}\n            ref={composedRefs}\n            /**\n             * We focus items on `pointerMove` to achieve the following:\n             *\n             * - Mouse over an item (it focuses)\n             * - Leave mouse where it is and use keyboard to focus a different item\n             * - Wiggle mouse without it leaving previously focused item\n             * - Previously focused item should re-focus\n             *\n             * If we used `mouseOver`/`mouseEnter` it would not re-focus when the mouse\n             * wiggles. This is to match native menu implementation.\n             */\n            onPointerMove={composeEventHandlers(\n              props.onPointerMove,\n              whenMouse((event) => {\n                if (disabled) {\n                  contentContext.onItemLeave(event);\n                } else {\n                  contentContext.onItemEnter(event);\n                  if (!event.defaultPrevented) {\n                    const item = event.currentTarget;\n                    item.focus({ preventScroll: true });\n                  }\n                }\n              })\n            )}\n            onPointerLeave={composeEventHandlers(\n              props.onPointerLeave,\n              whenMouse((event) => contentContext.onItemLeave(event))\n            )}\n            onFocus={composeEventHandlers(props.onFocus, () => setIsFocused(true))}\n            onBlur={composeEventHandlers(props.onBlur, () => setIsFocused(false))}\n          />\n        </RovingFocusGroup.Item>\n      </Collection.ItemSlot>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * MenuCheckboxItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst CHECKBOX_ITEM_NAME = 'MenuCheckboxItem';\n\ntype MenuCheckboxItemElement = MenuItemElement;\n\ntype CheckedState = boolean | 'indeterminate';\n\ninterface MenuCheckboxItemProps extends MenuItemProps {\n  checked?: CheckedState;\n  // `onCheckedChange` can never be called with `\"indeterminate\"` from the inside\n  onCheckedChange?: (checked: boolean) => void;\n}\n\nconst MenuCheckboxItem = React.forwardRef<MenuCheckboxItemElement, MenuCheckboxItemProps>(\n  (props: ScopedProps<MenuCheckboxItemProps>, forwardedRef) => {\n    const { checked = false, onCheckedChange, ...checkboxItemProps } = props;\n    return (\n      <ItemIndicatorProvider scope={props.__scopeMenu} checked={checked}>\n        <MenuItem\n          role=\"menuitemcheckbox\"\n          aria-checked={isIndeterminate(checked) ? 'mixed' : checked}\n          {...checkboxItemProps}\n          ref={forwardedRef}\n          data-state={getCheckedState(checked)}\n          onSelect={composeEventHandlers(\n            checkboxItemProps.onSelect,\n            () => onCheckedChange?.(isIndeterminate(checked) ? true : !checked),\n            { checkForDefaultPrevented: false }\n          )}\n        />\n      </ItemIndicatorProvider>\n    );\n  }\n);\n\nMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuRadioGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_GROUP_NAME = 'MenuRadioGroup';\n\nconst [RadioGroupProvider, useRadioGroupContext] = createMenuContext<MenuRadioGroupProps>(\n  RADIO_GROUP_NAME,\n  { value: undefined, onValueChange: () => {} }\n);\n\ntype MenuRadioGroupElement = React.ComponentRef<typeof MenuGroup>;\ninterface MenuRadioGroupProps extends MenuGroupProps {\n  value?: string;\n  onValueChange?: (value: string) => void;\n}\n\nconst MenuRadioGroup = React.forwardRef<MenuRadioGroupElement, MenuRadioGroupProps>(\n  (props: ScopedProps<MenuRadioGroupProps>, forwardedRef) => {\n    const { value, onValueChange, ...groupProps } = props;\n    const handleValueChange = useCallbackRef(onValueChange);\n    return (\n      <RadioGroupProvider scope={props.__scopeMenu} value={value} onValueChange={handleValueChange}>\n        <MenuGroup {...groupProps} ref={forwardedRef} />\n      </RadioGroupProvider>\n    );\n  }\n);\n\nMenuRadioGroup.displayName = RADIO_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuRadioItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_ITEM_NAME = 'MenuRadioItem';\n\ntype MenuRadioItemElement = React.ComponentRef<typeof MenuItem>;\ninterface MenuRadioItemProps extends MenuItemProps {\n  value: string;\n}\n\nconst MenuRadioItem = React.forwardRef<MenuRadioItemElement, MenuRadioItemProps>(\n  (props: ScopedProps<MenuRadioItemProps>, forwardedRef) => {\n    const { value, ...radioItemProps } = props;\n    const context = useRadioGroupContext(RADIO_ITEM_NAME, props.__scopeMenu);\n    const checked = value === context.value;\n    return (\n      <ItemIndicatorProvider scope={props.__scopeMenu} checked={checked}>\n        <MenuItem\n          role=\"menuitemradio\"\n          aria-checked={checked}\n          {...radioItemProps}\n          ref={forwardedRef}\n          data-state={getCheckedState(checked)}\n          onSelect={composeEventHandlers(\n            radioItemProps.onSelect,\n            () => context.onValueChange?.(value),\n            { checkForDefaultPrevented: false }\n          )}\n        />\n      </ItemIndicatorProvider>\n    );\n  }\n);\n\nMenuRadioItem.displayName = RADIO_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuItemIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_INDICATOR_NAME = 'MenuItemIndicator';\n\ntype CheckboxContextValue = { checked: CheckedState };\n\nconst [ItemIndicatorProvider, useItemIndicatorContext] = createMenuContext<CheckboxContextValue>(\n  ITEM_INDICATOR_NAME,\n  { checked: false }\n);\n\ntype MenuItemIndicatorElement = React.ComponentRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface MenuItemIndicatorProps extends PrimitiveSpanProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst MenuItemIndicator = React.forwardRef<MenuItemIndicatorElement, MenuItemIndicatorProps>(\n  (props: ScopedProps<MenuItemIndicatorProps>, forwardedRef) => {\n    const { __scopeMenu, forceMount, ...itemIndicatorProps } = props;\n    const indicatorContext = useItemIndicatorContext(ITEM_INDICATOR_NAME, __scopeMenu);\n    return (\n      <Presence\n        present={\n          forceMount ||\n          isIndeterminate(indicatorContext.checked) ||\n          indicatorContext.checked === true\n        }\n      >\n        <Primitive.span\n          {...itemIndicatorProps}\n          ref={forwardedRef}\n          data-state={getCheckedState(indicatorContext.checked)}\n        />\n      </Presence>\n    );\n  }\n);\n\nMenuItemIndicator.displayName = ITEM_INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'MenuSeparator';\n\ntype MenuSeparatorElement = React.ComponentRef<typeof Primitive.div>;\ninterface MenuSeparatorProps extends PrimitiveDivProps {}\n\nconst MenuSeparator = React.forwardRef<MenuSeparatorElement, MenuSeparatorProps>(\n  (props: ScopedProps<MenuSeparatorProps>, forwardedRef) => {\n    const { __scopeMenu, ...separatorProps } = props;\n    return (\n      <Primitive.div\n        role=\"separator\"\n        aria-orientation=\"horizontal\"\n        {...separatorProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nMenuSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'MenuArrow';\n\ntype MenuArrowElement = React.ComponentRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface MenuArrowProps extends PopperArrowProps {}\n\nconst MenuArrow = React.forwardRef<MenuArrowElement, MenuArrowProps>(\n  (props: ScopedProps<MenuArrowProps>, forwardedRef) => {\n    const { __scopeMenu, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopeMenu);\n    return <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nMenuArrow.displayName = ARROW_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuSub\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_NAME = 'MenuSub';\n\ntype MenuSubContextValue = {\n  contentId: string;\n  triggerId: string;\n  trigger: MenuSubTriggerElement | null;\n  onTriggerChange(trigger: MenuSubTriggerElement | null): void;\n};\n\nconst [MenuSubProvider, useMenuSubContext] = createMenuContext<MenuSubContextValue>(SUB_NAME);\n\ninterface MenuSubProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst MenuSub: React.FC<MenuSubProps> = (props: ScopedProps<MenuSubProps>) => {\n  const { __scopeMenu, children, open = false, onOpenChange } = props;\n  const parentMenuContext = useMenuContext(SUB_NAME, __scopeMenu);\n  const popperScope = usePopperScope(__scopeMenu);\n  const [trigger, setTrigger] = React.useState<MenuSubTriggerElement | null>(null);\n  const [content, setContent] = React.useState<MenuContentElement | null>(null);\n  const handleOpenChange = useCallbackRef(onOpenChange);\n\n  // Prevent the parent menu from reopening with open submenus.\n  React.useEffect(() => {\n    if (parentMenuContext.open === false) handleOpenChange(false);\n    return () => handleOpenChange(false);\n  }, [parentMenuContext.open, handleOpenChange]);\n\n  return (\n    <PopperPrimitive.Root {...popperScope}>\n      <MenuProvider\n        scope={__scopeMenu}\n        open={open}\n        onOpenChange={handleOpenChange}\n        content={content}\n        onContentChange={setContent}\n      >\n        <MenuSubProvider\n          scope={__scopeMenu}\n          contentId={useId()}\n          triggerId={useId()}\n          trigger={trigger}\n          onTriggerChange={setTrigger}\n        >\n          {children}\n        </MenuSubProvider>\n      </MenuProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nMenuSub.displayName = SUB_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuSubTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_TRIGGER_NAME = 'MenuSubTrigger';\n\ntype MenuSubTriggerElement = MenuItemImplElement;\ninterface MenuSubTriggerProps extends MenuItemImplProps {}\n\nconst MenuSubTrigger = React.forwardRef<MenuSubTriggerElement, MenuSubTriggerProps>(\n  (props: ScopedProps<MenuSubTriggerProps>, forwardedRef) => {\n    const context = useMenuContext(SUB_TRIGGER_NAME, props.__scopeMenu);\n    const rootContext = useMenuRootContext(SUB_TRIGGER_NAME, props.__scopeMenu);\n    const subContext = useMenuSubContext(SUB_TRIGGER_NAME, props.__scopeMenu);\n    const contentContext = useMenuContentContext(SUB_TRIGGER_NAME, props.__scopeMenu);\n    const openTimerRef = React.useRef<number | null>(null);\n    const { pointerGraceTimerRef, onPointerGraceIntentChange } = contentContext;\n    const scope = { __scopeMenu: props.__scopeMenu };\n\n    const clearOpenTimer = React.useCallback(() => {\n      if (openTimerRef.current) window.clearTimeout(openTimerRef.current);\n      openTimerRef.current = null;\n    }, []);\n\n    React.useEffect(() => clearOpenTimer, [clearOpenTimer]);\n\n    React.useEffect(() => {\n      const pointerGraceTimer = pointerGraceTimerRef.current;\n      return () => {\n        window.clearTimeout(pointerGraceTimer);\n        onPointerGraceIntentChange(null);\n      };\n    }, [pointerGraceTimerRef, onPointerGraceIntentChange]);\n\n    return (\n      <MenuAnchor asChild {...scope}>\n        <MenuItemImpl\n          id={subContext.triggerId}\n          aria-haspopup=\"menu\"\n          aria-expanded={context.open}\n          aria-controls={subContext.contentId}\n          data-state={getOpenState(context.open)}\n          {...props}\n          ref={composeRefs(forwardedRef, subContext.onTriggerChange)}\n          // This is redundant for mouse users but we cannot determine pointer type from\n          // click event and we cannot use pointerup event (see git history for reasons why)\n          onClick={(event) => {\n            props.onClick?.(event);\n            if (props.disabled || event.defaultPrevented) return;\n            /**\n             * We manually focus because iOS Safari doesn't always focus on click (e.g. buttons)\n             * and we rely heavily on `onFocusOutside` for submenus to close when switching\n             * between separate submenus.\n             */\n            event.currentTarget.focus();\n            if (!context.open) context.onOpenChange(true);\n          }}\n          onPointerMove={composeEventHandlers(\n            props.onPointerMove,\n            whenMouse((event) => {\n              contentContext.onItemEnter(event);\n              if (event.defaultPrevented) return;\n              if (!props.disabled && !context.open && !openTimerRef.current) {\n                contentContext.onPointerGraceIntentChange(null);\n                openTimerRef.current = window.setTimeout(() => {\n                  context.onOpenChange(true);\n                  clearOpenTimer();\n                }, 100);\n              }\n            })\n          )}\n          onPointerLeave={composeEventHandlers(\n            props.onPointerLeave,\n            whenMouse((event) => {\n              clearOpenTimer();\n\n              const contentRect = context.content?.getBoundingClientRect();\n              if (contentRect) {\n                // TODO: make sure to update this when we change positioning logic\n                const side = context.content?.dataset.side as Side;\n                const rightSide = side === 'right';\n                const bleed = rightSide ? -5 : +5;\n                const contentNearEdge = contentRect[rightSide ? 'left' : 'right'];\n                const contentFarEdge = contentRect[rightSide ? 'right' : 'left'];\n\n                contentContext.onPointerGraceIntentChange({\n                  area: [\n                    // Apply a bleed on clientX to ensure that our exit point is\n                    // consistently within polygon bounds\n                    { x: event.clientX + bleed, y: event.clientY },\n                    { x: contentNearEdge, y: contentRect.top },\n                    { x: contentFarEdge, y: contentRect.top },\n                    { x: contentFarEdge, y: contentRect.bottom },\n                    { x: contentNearEdge, y: contentRect.bottom },\n                  ],\n                  side,\n                });\n\n                window.clearTimeout(pointerGraceTimerRef.current);\n                pointerGraceTimerRef.current = window.setTimeout(\n                  () => contentContext.onPointerGraceIntentChange(null),\n                  300\n                );\n              } else {\n                contentContext.onTriggerLeave(event);\n                if (event.defaultPrevented) return;\n\n                // There's 100ms where the user may leave an item before the submenu was opened.\n                contentContext.onPointerGraceIntentChange(null);\n              }\n            })\n          )}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            const isTypingAhead = contentContext.searchRef.current !== '';\n            if (props.disabled || (isTypingAhead && event.key === ' ')) return;\n            if (SUB_OPEN_KEYS[rootContext.dir].includes(event.key)) {\n              context.onOpenChange(true);\n              // The trigger may hold focus if opened via pointer interaction\n              // so we ensure content is given focus again when switching to keyboard.\n              context.content?.focus();\n              // prevent window from scrolling\n              event.preventDefault();\n            }\n          })}\n        />\n      </MenuAnchor>\n    );\n  }\n);\n\nMenuSubTrigger.displayName = SUB_TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuSubContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_CONTENT_NAME = 'MenuSubContent';\n\ntype MenuSubContentElement = MenuContentImplElement;\ninterface MenuSubContentProps\n  extends Omit<\n    MenuContentImplProps,\n    keyof MenuContentImplPrivateProps | 'onCloseAutoFocus' | 'onEntryFocus' | 'side' | 'align'\n  > {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst MenuSubContent = React.forwardRef<MenuSubContentElement, MenuSubContentProps>(\n  (props: ScopedProps<MenuSubContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeMenu);\n    const { forceMount = portalContext.forceMount, ...subContentProps } = props;\n    const context = useMenuContext(CONTENT_NAME, props.__scopeMenu);\n    const rootContext = useMenuRootContext(CONTENT_NAME, props.__scopeMenu);\n    const subContext = useMenuSubContext(SUB_CONTENT_NAME, props.__scopeMenu);\n    const ref = React.useRef<MenuSubContentElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    return (\n      <Collection.Provider scope={props.__scopeMenu}>\n        <Presence present={forceMount || context.open}>\n          <Collection.Slot scope={props.__scopeMenu}>\n            <MenuContentImpl\n              id={subContext.contentId}\n              aria-labelledby={subContext.triggerId}\n              {...subContentProps}\n              ref={composedRefs}\n              align=\"start\"\n              side={rootContext.dir === 'rtl' ? 'left' : 'right'}\n              disableOutsidePointerEvents={false}\n              disableOutsideScroll={false}\n              trapFocus={false}\n              onOpenAutoFocus={(event) => {\n                // when opening a submenu, focus content for keyboard users only\n                if (rootContext.isUsingKeyboardRef.current) ref.current?.focus();\n                event.preventDefault();\n              }}\n              // The menu might close because of focusing another menu item in the parent menu. We\n              // don't want it to refocus the trigger in that case so we handle trigger focus ourselves.\n              onCloseAutoFocus={(event) => event.preventDefault()}\n              onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) => {\n                // We prevent closing when the trigger is focused to avoid triggering a re-open animation\n                // on pointer interaction.\n                if (event.target !== subContext.trigger) context.onOpenChange(false);\n              })}\n              onEscapeKeyDown={composeEventHandlers(props.onEscapeKeyDown, (event) => {\n                rootContext.onClose();\n                // ensure pressing escape in submenu doesn't escape full screen mode\n                event.preventDefault();\n              })}\n              onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n                // Submenu key events bubble through portals. We only care about keys in this menu.\n                const isKeyDownInside = event.currentTarget.contains(event.target as HTMLElement);\n                const isCloseKey = SUB_CLOSE_KEYS[rootContext.dir].includes(event.key);\n                if (isKeyDownInside && isCloseKey) {\n                  context.onOpenChange(false);\n                  // We focus manually because we prevented it in `onCloseAutoFocus`\n                  subContext.trigger?.focus();\n                  // prevent window from scrolling\n                  event.preventDefault();\n                }\n              })}\n            />\n          </Collection.Slot>\n        </Presence>\n      </Collection.Provider>\n    );\n  }\n);\n\nMenuSubContent.displayName = SUB_CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getOpenState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nfunction isIndeterminate(checked?: CheckedState): checked is 'indeterminate' {\n  return checked === 'indeterminate';\n}\n\nfunction getCheckedState(checked: CheckedState) {\n  return isIndeterminate(checked) ? 'indeterminate' : checked ? 'checked' : 'unchecked';\n}\n\nfunction focusFirst(candidates: HTMLElement[]) {\n  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n  for (const candidate of candidates) {\n    // if focus is already where we want to go, we don't want to keep going through the candidates\n    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n    candidate.focus();\n    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n  }\n}\n\n/**\n * Wraps an array around itself at a given start index\n * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`\n */\nfunction wrapArray<T>(array: T[], startIndex: number) {\n  return array.map<T>((_, index) => array[(startIndex + index) % array.length]!);\n}\n\n/**\n * This is the \"meat\" of the typeahead matching logic. It takes in all the values,\n * the search and the current match, and returns the next match (or `undefined`).\n *\n * We normalize the search because if a user has repeatedly pressed a character,\n * we want the exact same behavior as if we only had that one character\n * (ie. cycle through options starting with that character)\n *\n * We also reorder the values by wrapping the array around the current match.\n * This is so we always look forward from the current match, and picking the first\n * match will always be the correct one.\n *\n * Finally, if the normalized search is exactly one character, we exclude the\n * current match from the values because otherwise it would be the first to match always\n * and focus would never move. This is as opposed to the regular case, where we\n * don't want focus to move if the current match still matches.\n */\nfunction getNextMatch(values: string[], search: string, currentMatch?: string) {\n  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);\n  const normalizedSearch = isRepeated ? search[0]! : search;\n  const currentMatchIndex = currentMatch ? values.indexOf(currentMatch) : -1;\n  let wrappedValues = wrapArray(values, Math.max(currentMatchIndex, 0));\n  const excludeCurrentMatch = normalizedSearch.length === 1;\n  if (excludeCurrentMatch) wrappedValues = wrappedValues.filter((v) => v !== currentMatch);\n  const nextMatch = wrappedValues.find((value) =>\n    value.toLowerCase().startsWith(normalizedSearch.toLowerCase())\n  );\n  return nextMatch !== currentMatch ? nextMatch : undefined;\n}\n\ntype Point = { x: number; y: number };\ntype Polygon = Point[];\ntype Side = 'left' | 'right';\ntype GraceIntent = { area: Polygon; side: Side };\n\n// Determine if a point is inside of a polygon.\n// Based on https://github.com/substack/point-in-polygon\nfunction isPointInPolygon(point: Point, polygon: Polygon) {\n  const { x, y } = point;\n  let inside = false;\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const ii = polygon[i]!;\n    const jj = polygon[j]!;\n    const xi = ii.x;\n    const yi = ii.y;\n    const xj = jj.x;\n    const yj = jj.y;\n\n    // prettier-ignore\n    const intersect = ((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n    if (intersect) inside = !inside;\n  }\n\n  return inside;\n}\n\nfunction isPointerInGraceArea(event: React.PointerEvent, area?: Polygon) {\n  if (!area) return false;\n  const cursorPos = { x: event.clientX, y: event.clientY };\n  return isPointInPolygon(cursorPos, area);\n}\n\nfunction whenMouse<E>(handler: React.PointerEventHandler<E>): React.PointerEventHandler<E> {\n  return (event) => (event.pointerType === 'mouse' ? handler(event) : undefined);\n}\n\nconst Root = Menu;\nconst Anchor = MenuAnchor;\nconst Portal = MenuPortal;\nconst Content = MenuContent;\nconst Group = MenuGroup;\nconst Label = MenuLabel;\nconst Item = MenuItem;\nconst CheckboxItem = MenuCheckboxItem;\nconst RadioGroup = MenuRadioGroup;\nconst RadioItem = MenuRadioItem;\nconst ItemIndicator = MenuItemIndicator;\nconst Separator = MenuSeparator;\nconst Arrow = MenuArrow;\nconst Sub = MenuSub;\nconst SubTrigger = MenuSubTrigger;\nconst SubContent = MenuSubContent;\n\nexport {\n  createMenuScope,\n  //\n  Menu,\n  MenuAnchor,\n  MenuPortal,\n  MenuContent,\n  MenuGroup,\n  MenuLabel,\n  MenuItem,\n  MenuCheckboxItem,\n  MenuRadioGroup,\n  MenuRadioItem,\n  MenuItemIndicator,\n  MenuSeparator,\n  MenuArrow,\n  MenuSub,\n  MenuSubTrigger,\n  MenuSubContent,\n  //\n  Root,\n  Anchor,\n  Portal,\n  Content,\n  Group,\n  Label,\n  Item,\n  CheckboxItem,\n  RadioGroup,\n  RadioItem,\n  ItemIndicator,\n  Separator,\n  Arrow,\n  Sub,\n  SubTrigger,\n  SubContent,\n};\nexport type {\n  MenuProps,\n  MenuAnchorProps,\n  MenuPortalProps,\n  MenuContentProps,\n  MenuGroupProps,\n  MenuLabelProps,\n  MenuItemProps,\n  MenuCheckboxItemProps,\n  MenuRadioGroupProps,\n  MenuRadioItemProps,\n  MenuItemIndicatorProps,\n  MenuSeparatorProps,\n  MenuArrowProps,\n  MenuSubProps,\n  MenuSubTriggerProps,\n  MenuSubContentProps,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}