{"ast":null,"code":"\"use client\";\n\n// src/progress.tsx\nimport _objectSpread from \"/Users/ericmeltser/Downloads/playright_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/ericmeltser/Downloads/playright_frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"__scopeProgress\", \"value\", \"max\", \"getValueLabel\"],\n  _excluded2 = [\"__scopeProgress\"];\nimport * as React from \"react\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { jsx } from \"react/jsx-runtime\";\nvar PROGRESS_NAME = \"Progress\";\nvar DEFAULT_MAX = 100;\nvar [createProgressContext, createProgressScope] = createContextScope(PROGRESS_NAME);\nvar [ProgressProvider, useProgressContext] = createProgressContext(PROGRESS_NAME);\nvar Progress = React.forwardRef((props, forwardedRef) => {\n  const {\n      __scopeProgress,\n      value: valueProp = null,\n      max: maxProp,\n      getValueLabel = defaultGetValueLabel\n    } = props,\n    progressProps = _objectWithoutProperties(props, _excluded);\n  if ((maxProp || maxProp === 0) && !isValidMaxNumber(maxProp)) {\n    console.error(getInvalidMaxError(\"\".concat(maxProp), \"Progress\"));\n  }\n  const max = isValidMaxNumber(maxProp) ? maxProp : DEFAULT_MAX;\n  if (valueProp !== null && !isValidValueNumber(valueProp, max)) {\n    console.error(getInvalidValueError(\"\".concat(valueProp), \"Progress\"));\n  }\n  const value = isValidValueNumber(valueProp, max) ? valueProp : null;\n  const valueLabel = isNumber(value) ? getValueLabel(value, max) : void 0;\n  return /* @__PURE__ */jsx(ProgressProvider, {\n    scope: __scopeProgress,\n    value,\n    max,\n    children: /* @__PURE__ */jsx(Primitive.div, _objectSpread(_objectSpread({\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": 0,\n      \"aria-valuenow\": isNumber(value) ? value : void 0,\n      \"aria-valuetext\": valueLabel,\n      role: \"progressbar\",\n      \"data-state\": getProgressState(value, max),\n      \"data-value\": value !== null && value !== void 0 ? value : void 0,\n      \"data-max\": max\n    }, progressProps), {}, {\n      ref: forwardedRef\n    }))\n  });\n});\nProgress.displayName = PROGRESS_NAME;\nvar INDICATOR_NAME = \"ProgressIndicator\";\nvar ProgressIndicator = React.forwardRef((props, forwardedRef) => {\n  var _context$value;\n  const {\n      __scopeProgress\n    } = props,\n    indicatorProps = _objectWithoutProperties(props, _excluded2);\n  const context = useProgressContext(INDICATOR_NAME, __scopeProgress);\n  return /* @__PURE__ */jsx(Primitive.div, _objectSpread(_objectSpread({\n    \"data-state\": getProgressState(context.value, context.max),\n    \"data-value\": (_context$value = context.value) !== null && _context$value !== void 0 ? _context$value : void 0,\n    \"data-max\": context.max\n  }, indicatorProps), {}, {\n    ref: forwardedRef\n  }));\n});\nProgressIndicator.displayName = INDICATOR_NAME;\nfunction defaultGetValueLabel(value, max) {\n  return \"\".concat(Math.round(value / max * 100), \"%\");\n}\nfunction getProgressState(value, maxValue) {\n  return value == null ? \"indeterminate\" : value === maxValue ? \"complete\" : \"loading\";\n}\nfunction isNumber(value) {\n  return typeof value === \"number\";\n}\nfunction isValidMaxNumber(max) {\n  return isNumber(max) && !isNaN(max) && max > 0;\n}\nfunction isValidValueNumber(value, max) {\n  return isNumber(value) && !isNaN(value) && value <= max && value >= 0;\n}\nfunction getInvalidMaxError(propValue, componentName) {\n  return \"Invalid prop `max` of value `\".concat(propValue, \"` supplied to `\").concat(componentName, \"`. Only numbers greater than 0 are valid max values. Defaulting to `\").concat(DEFAULT_MAX, \"`.\");\n}\nfunction getInvalidValueError(propValue, componentName) {\n  return \"Invalid prop `value` of value `\".concat(propValue, \"` supplied to `\").concat(componentName, \"`. The `value` prop must be:\\n  - a positive number\\n  - less than the value passed to `max` (or \").concat(DEFAULT_MAX, \" if no `max` prop is set)\\n  - `null` or `undefined` if the progress is indeterminate.\\n\\nDefaulting to `null`.\");\n}\nvar Root = Progress;\nvar Indicator = ProgressIndicator;\nexport { Indicator, Progress, ProgressIndicator, Root, createProgressScope };","map":{"version":3,"names":["React","createContextScope","Primitive","jsx","PROGRESS_NAME","DEFAULT_MAX","createProgressContext","createProgressScope","ProgressProvider","useProgressContext","Progress","forwardRef","props","forwardedRef","__scopeProgress","value","valueProp","max","maxProp","getValueLabel","defaultGetValueLabel","progressProps","_objectWithoutProperties","_excluded","isValidMaxNumber","console","error","getInvalidMaxError","concat","isValidValueNumber","getInvalidValueError","valueLabel","isNumber","scope","children","div","_objectSpread","role","getProgressState","ref","displayName","INDICATOR_NAME","ProgressIndicator","_context$value","indicatorProps","_excluded2","context","Math","round","maxValue","isNaN","propValue","componentName","Root","Indicator"],"sources":["/Users/ericmeltser/Downloads/playright_frontend/node_modules/@radix-ui/react-progress/src/progress.tsx"],"sourcesContent":["import * as React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Progress\n * -----------------------------------------------------------------------------------------------*/\n\nconst PROGRESS_NAME = 'Progress';\nconst DEFAULT_MAX = 100;\n\ntype ScopedProps<P> = P & { __scopeProgress?: Scope };\nconst [createProgressContext, createProgressScope] = createContextScope(PROGRESS_NAME);\n\ntype ProgressState = 'indeterminate' | 'complete' | 'loading';\ntype ProgressContextValue = { value: number | null; max: number };\nconst [ProgressProvider, useProgressContext] =\n  createProgressContext<ProgressContextValue>(PROGRESS_NAME);\n\ntype ProgressElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ProgressProps extends PrimitiveDivProps {\n  value?: number | null | undefined;\n  max?: number;\n  getValueLabel?(value: number, max: number): string;\n}\n\nconst Progress = React.forwardRef<ProgressElement, ProgressProps>(\n  (props: ScopedProps<ProgressProps>, forwardedRef) => {\n    const {\n      __scopeProgress,\n      value: valueProp = null,\n      max: maxProp,\n      getValueLabel = defaultGetValueLabel,\n      ...progressProps\n    } = props;\n\n    if ((maxProp || maxProp === 0) && !isValidMaxNumber(maxProp)) {\n      console.error(getInvalidMaxError(`${maxProp}`, 'Progress'));\n    }\n\n    const max = isValidMaxNumber(maxProp) ? maxProp : DEFAULT_MAX;\n\n    if (valueProp !== null && !isValidValueNumber(valueProp, max)) {\n      console.error(getInvalidValueError(`${valueProp}`, 'Progress'));\n    }\n\n    const value = isValidValueNumber(valueProp, max) ? valueProp : null;\n    const valueLabel = isNumber(value) ? getValueLabel(value, max) : undefined;\n\n    return (\n      <ProgressProvider scope={__scopeProgress} value={value} max={max}>\n        <Primitive.div\n          aria-valuemax={max}\n          aria-valuemin={0}\n          aria-valuenow={isNumber(value) ? value : undefined}\n          aria-valuetext={valueLabel}\n          role=\"progressbar\"\n          data-state={getProgressState(value, max)}\n          data-value={value ?? undefined}\n          data-max={max}\n          {...progressProps}\n          ref={forwardedRef}\n        />\n      </ProgressProvider>\n    );\n  }\n);\n\nProgress.displayName = PROGRESS_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ProgressIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'ProgressIndicator';\n\ntype ProgressIndicatorElement = React.ComponentRef<typeof Primitive.div>;\ninterface ProgressIndicatorProps extends PrimitiveDivProps {}\n\nconst ProgressIndicator = React.forwardRef<ProgressIndicatorElement, ProgressIndicatorProps>(\n  (props: ScopedProps<ProgressIndicatorProps>, forwardedRef) => {\n    const { __scopeProgress, ...indicatorProps } = props;\n    const context = useProgressContext(INDICATOR_NAME, __scopeProgress);\n    return (\n      <Primitive.div\n        data-state={getProgressState(context.value, context.max)}\n        data-value={context.value ?? undefined}\n        data-max={context.max}\n        {...indicatorProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nProgressIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nfunction defaultGetValueLabel(value: number, max: number) {\n  return `${Math.round((value / max) * 100)}%`;\n}\n\nfunction getProgressState(value: number | undefined | null, maxValue: number): ProgressState {\n  return value == null ? 'indeterminate' : value === maxValue ? 'complete' : 'loading';\n}\n\nfunction isNumber(value: any): value is number {\n  return typeof value === 'number';\n}\n\nfunction isValidMaxNumber(max: any): max is number {\n  // prettier-ignore\n  return (\n    isNumber(max) &&\n    !isNaN(max) &&\n    max > 0\n  );\n}\n\nfunction isValidValueNumber(value: any, max: number): value is number {\n  // prettier-ignore\n  return (\n    isNumber(value) &&\n    !isNaN(value) &&\n    value <= max &&\n    value >= 0\n  );\n}\n\n// Split this out for clearer readability of the error message.\nfunction getInvalidMaxError(propValue: string, componentName: string) {\n  return `Invalid prop \\`max\\` of value \\`${propValue}\\` supplied to \\`${componentName}\\`. Only numbers greater than 0 are valid max values. Defaulting to \\`${DEFAULT_MAX}\\`.`;\n}\n\nfunction getInvalidValueError(propValue: string, componentName: string) {\n  return `Invalid prop \\`value\\` of value \\`${propValue}\\` supplied to \\`${componentName}\\`. The \\`value\\` prop must be:\n  - a positive number\n  - less than the value passed to \\`max\\` (or ${DEFAULT_MAX} if no \\`max\\` prop is set)\n  - \\`null\\` or \\`undefined\\` if the progress is indeterminate.\n\nDefaulting to \\`null\\`.`;\n}\n\nconst Root = Progress;\nconst Indicator = ProgressIndicator;\n\nexport {\n  createProgressScope,\n  //\n  Progress,\n  ProgressIndicator,\n  //\n  Root,\n  Indicator,\n};\nexport type { ProgressProps, ProgressIndicatorProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}